{"version":3,"sources":["D2App/components/Schemas/Schemas.module.css","D2App/App.module.css","D2App/components/FormAlerts/FormAlerts.module.css","D2App/components/FormField/FormField.module.css","D2App/components/ImportButtonStrip/ImportButtonStrip.module.css","D2App/components/JobOverview/JobOverview.module.css","D2App/components/JobOverview/MenuLabel/MenuLabel.module.css","D2App/components/JobSummary/JobSummary.module.css","D2App/components/MoreOptions/MoreOptions.module.css","D2App/components/OrgUnitTree/OrgUnitTree.module.css","D2App/components/Page/Page.module.css","D2App/components/RadioGroup/RadioGroup.module.css","D2App/pages/JobOverview/JobOverview.module.css","D2App/components/Select/Select.module.css","D2App/components/SelectableList/SelectableList.module.css","D2App/components/Sidebar/Sidebar.module.css","D2App/components/StyledLink/StyledLink.module.css","D2App/contexts/User.js","D2App/contexts/Task.js","D2App/components/Icon/Icon.js","D2App/utils/tasks.js","D2App/hooks/useTasks.js","D2App/hooks/useUser.js","D2App/hooks/useProgramStages.js","D2App/hooks/useClassKeys.js","D2App/utils/options.js","D2App/components/ElementSchemes/DataElementIdScheme.js","D2App/components/DataSetPicker/DataSetPicker.js","D2App/components/DataSetPicker/DataSetPickerField.js","D2App/utils/mime.js","D2App/utils/xhr.js","D2App/utils/helper.js","D2App/components/DatePicker/DatePicker.js","D2App/components/DatePicker/DatePickerField.js","D2App/components/ElementSchemes/EventIdScheme.js","D2App/components/FileUpload/FileUpload.js","D2App/components/FormAlerts/FormAlerts.js","D2App/components/FormField/FormField.js","D2App/components/ElementSchemes/IdScheme.js","D2App/components/ImportButtonStrip/ImportButtonStrip.js","D2App/components/JobOverview/helper.js","D2App/components/JobOverview/MenuLabel/MenuLabel.js","D2App/components/JobOverview/JobOverview.js","D2App/components/JobSummary/Events/Events.js","D2App/components/JobSummary/helper.js","D2App/components/JobSummary/SingleStatusTable/SingleStatusTable.js","D2App/components/JobSummary/SingleSummary/SingleSummary.js","D2App/components/JobSummary/TypeCount/TypeCount.js","D2App/components/JobSummary/Messages/Messages.js","D2App/components/JobSummary/TypeReportSummary/TypeReportSummary.js","D2App/components/JobSummary/Summary/Summary.js","D2App/components/JobSummary/Details/Details.js","D2App/components/JobSummary/JobSummary.js","D2App/components/JobSummary/MiniJobSummary/MiniJobSummary.js","D2App/components/MoreOptions/MoreOptions.js","D2App/components/ElementSchemes/OrgUnitIdScheme.js","D2App/components/OrgUnitTree/Tree/Tree.js","D2App/components/OrgUnitTree/OrgUnitTree.js","D2App/components/OrgUnitTree/OrgUnitTreeField.js","D2App/components/Page/Page.js","D2App/components/ProgramPicker/ProgramPicker.js","D2App/components/ProgramPicker/ProgramPickerField.js","D2App/components/ProgramStages/ProgramStages.js","D2App/components/RadioGroup/RadioGroup.js","D2App/components/RadioGroup/RadioGroupField.js","D2App/components/Inputs/FileUpload.js","D2App/components/Inputs/ImportButtonStrip.js","D2App/components/Inputs/FormAlerts.js","D2App/components/Inputs/Format.js","D2App/components/Inputs/FirstRowIsHeader.js","D2App/components/Inputs/ClassKey.js","D2App/components/Inputs/Strategy.js","D2App/components/Inputs/PreheatCache.js","D2App/components/Inputs/SkipAudit.js","D2App/components/Inputs/SkipExistingCheck.js","D2App/components/Inputs/Identifier.js","D2App/components/Inputs/ImportReportMode.js","D2App/components/Inputs/PreheatMode.js","D2App/components/Inputs/ImportStrategy.js","D2App/components/Inputs/AtomicMode.js","D2App/components/Inputs/MergeMode.js","D2App/components/Inputs/FlushMode.js","D2App/components/Inputs/InclusionStrategy.js","D2App/components/Inputs/SkipSharing.js","D2App/components/Inputs/SkipValidation.js","D2App/components/Inputs/IsAsync.js","D2App/components/Inputs/OrgUnitTree.js","D2App/components/Inputs/DataSetPicker.js","D2App/components/Inputs/ProgramPicker.js","D2App/components/Inputs/IncludeChildren.js","D2App/components/Inputs/IncludeDeleted.js","D2App/components/Inputs/Compression.js","D2App/components/Inputs/Inclusion.js","D2App/components/Inputs/StartDate.js","D2App/components/Inputs/EndDate.js","D2App/components/Inputs/ExportButton.js","D2App/components/Inputs/ProgramStages.js","D2App/components/Schemas/helper.js","D2App/components/Schemas/SchemaGroup.js","D2App/components/Schemas/Schemas.js","D2App/components/Schemas/SchemasField.js","D2App/components/Inputs/Schemas.js","D2App/components/Inputs/ObjectType.js","D2App/components/Inputs/Objects.js","D2App/hooks/useObjects.js","D2App/components/Inputs/DataElementIdScheme.js","D2App/components/Inputs/EventIdScheme.js","D2App/components/Inputs/IdScheme.js","D2App/components/Inputs/OrgUnitIdScheme.js","D2App/utils/final-form.js","D2App/pages/MetadataImport/form-helper.js","D2App/pages/MetadataImport/MetadataImport.js","D2App/pages/MetadataExport/MetadataExport.js","D2App/pages/MetadataExport/form-helper.js","D2App/pages/MetadataDependencyExport/MetadataDependencyExport.js","D2App/pages/MetadataDependencyExport/form-helper.js","D2App/pages/JobOverview/JobOverview.js","D2App/pages/GMLImport/GMLImport.js","D2App/pages/GMLImport/form-helper.js","D2App/pages/EventImport/EventImport.js","D2App/pages/EventImport/form-helper.js","D2App/pages/EventExport/form-helper.js","D2App/pages/EventExport/EventExport.js","D2App/components/WithAuthority/predicates.js","D2App/pages/DataImport/DataImport.js","D2App/pages/DataImport/form-helper.js","D2App/pages/DataExport/form-helper.js","D2App/pages/DataExport/DataExport.js","D2App/components/Router/Router.js","D2App/components/Select/Select.js","D2App/components/Select/SelectField.js","D2App/components/SelectableList/SelectableList.js","D2App/components/Sidebar/Sidebar.js","D2App/components/StyledLink/StyledLink.js","D2App/components/Switch/Switch.js","D2App/components/WithAuthority/WithAuthority.js","D2App/App.js"],"names":["module","exports","UserContext","React","createContext","undefined","TaskContext","getNewestTask","tasks","Object","keys","map","k","sort","a","b","created","createStyle","width","height","display","fill","color","userSelect","MetadataImportIcon","viewBox","style","data-test","d","MetadataExportIcon","MetadataDependencyExportIcon","DataIcon","EventIcon","GMLIcon","PlusIcon","MinusIcon","TasksIcon","categoryTypes","key","importType","icon","label","i18n","t","allCategories","jobEventQuery","events","resource","id","type","taskId","jobSummaryQuery","summary","defaultTasks","data","event","gml","metadata","defaultJobOverview","activeTypes","selectedJob","useTasks","engine","useDataEngine","setTasks","useState","jobOverview","setJobOverview","fetchSummary","async","task","newTask","error","query","variables","console","status","createFetchSummary","fetchEvents","completed","length","newEvents","filter","e","some","te","uid","level","text","message","date","Date","time","errorEvent","find","reverse","lastUpdated","setTimeout","createFetchEvents","addTask","entry","createAddTask","updateJobOverview","val","createUpdateJobOverview","userQuery","user","programStageQuery","fields","params","paging","ALL_LABEL","classKeyQuery","formatOptions","value","formatNoCsvOptions","f","formatAdxOptions","formatAdxPdfOptions","compressionOptions","objectTypeOptions","dataElementIdSchemeOptions","orgUnitIdSchemeOptions","idSchemeOptions","eventIdSchemeOptions","inclusionOptions","strategyOptions","importStrategyOptions","identifierOptions","importReportModeOptions","preheatModeOptions","atomicModeOptions","mergeModeOptions","flushModeOptions","inclusionStrategyOptions","defaultFormatOption","defaultCompressionOption","defaultObjectTypeOption","defaultDataElementIdSchemeOption","defaultOrgUnitIdSchemeOption","defaultIdSchemeOption","defaultEventIdSchemeOption","defaultInclusionOption","defaultStrategyOption","defaultIdentifierOption","defaultImportReportModeOption","defaultPreheatModeOption","defaultImportStrategyOption","defaultAtomicModeOption","defaultMergeModeOption","defaultFlushModeOption","defaultInclusionStrategyOption","optionPropType","PropTypes","exact","string","isRequired","schemeQuery","arrayOf","DataElementIdScheme","name","dataTest","loading","useDataQuery","validationText","schemes","attributes","displayName","options","SelectField","dense","dataSetQuery","dataSets","DataSetPicker","selected","setSelected","meta","multiSelect","withFilter","withActions","list","setList","setError","onComplete","onError","showList","FormField","SelectableList","touched","pristine","SINGLE_DATASET_VALIDATOR","selectedDataSets","SINGLE_EXACT_DATASET_VALIDATOR","Wrapper","input","onChange","rest","DataSetPickerField","validator","component","validate","mapping","json","xml","csv","adx","pdf","getUploadXHR","url","upload","onResponse","setProgress","format","xhr","XMLHttpRequest","contentType","getMimeType","withCredentials","open","setRequestHeader","onreadystatechange","onReadyStateChange","onprogress","onProgress","Math","floor","readyState","idAndMsg","extractIdAndMessage","JSON","parse","responseText","typeReports","response","Array","isArray","objectReports","errorReports","msg","evt","lengthComputable","percentComplete","parseInt","loaded","total","max","pathToId","path","pathSplit","split","jsDateToISO8601","getFullYear","toString","getMonth","padStart","getDate","jsDateToString","getHours","getMinutes","getSeconds","blobType","compression","downloadBlob","filename","link","document","createElement","href","setAttribute","body","appendChild","click","remove","genericErrorMessage","errorGenerator","timestamp","getTime","critical","uploadFile","file","addEntry","errF","Promise","resolve","reject","ev","target","e2","send","locationAssign","window","location","getPrevJobDetails","job","jobDetails","DatePicker","required","inputWidth","DATE_VALIDATOR","DATE_BEFORE_VALIDATOR","date1","date2","DATE_AFTER_VALIDATOR","inputName","DatePickerField","EventIdScheme","FileUpload","initialValue","accept","FileInput","FormAlerts","alerts","bars","setBars","useEffect","newBars","warning","info","success","duration","className","styles","container","children","org","IdScheme","rawDataElementAttributes","rawOrganisationUnitAttributes","dataElementAttributes","organisationUnitAttributes","reduce","shared","attribute","collection","attributeFoundIn","findSharedAttributes","DRYRUN_HELPTEXT","ImportButtonStrip","dryRunDataTest","importDataTest","form","primary","onClick","change","dryRun","secondary","categoryTypesObj","acc","cur","MenuLabel","files","substring","JobOverview","setActiveTypes","setSelectedJob","useContext","allTasks","flat","createdAt","filteredTasks","includes","items","Menu","chips","onChipClick","active","JobSummary","showFileDetails","showJobDetails","to","pathname","Events","statsPropTypeObj","deleted","number","ignored","updated","imported","getClassName","c","s","SingleStatusTable","property","description","SingleSummary","importCount","conflicts","i","object","TypeCount","stats","Messages","messages","m","TypeReportSummary","overviewStats","extractStats","responseType","Summary","report","allStats","allMessages","forEach","klass","r","push","mainKlass","errorProperty","typeReportParse","overviewSummary","allSummaries","importSummaries","valueToString","File","v","join","Details","details","Header","header","title","taskDetails","Tags","tags","positive","neutral","negative","bold","MiniJobSummary","MoreOptions","initiallyVisible","hidden","setHidden","OrgUnitIdScheme","Tree","select","onOpen","onClose","node","l","hasChildren","checked","rootQuery","roots","orgQuery","units","OrgUnitTree","setChildren","organisationUnits","formatList","toggleOpenStatus","hierarchy","p","newChildren","parent","el","showTree","newValue","ch","orgId","localeCompare","setChildrenFor","SINGLE_ORG_VALIDATOR","selectedOrgUnits","SINGLE_EXACT_ORG_VALIDATOR","OrgUnitTreeField","Page","desc","summaryTask","showFullSummaryTask","loadingEl","amount","preBody","content","programQuery","programs","ProgramPicker","autoSelectFirst","defaultProps","SINGLE_PROGRAM_VALIDATOR","selectedPrograms","SINGLE_EXACT_PROGRAM_VALIDATOR","ProgramPickerField","ProgramStages","program","programStagesLoading","programStagesError","programStagesValidationText","programStages","setLoading","stages","setStages","formattedList","useProgramStages","RadioGroup","setValue","inputs","o","radio","help","RadioGroupField","LABEL","VALIDATOR","Format","availableFormats","FirstRowIsHeader","show","Switch","ClassKey","prevValue","classKeysLoading","classKeysError","classKeysValidationText","classKeys","setClassKeys","classData","useClassKeys","filterable","Strategy","HELPTEXT","PreheatCache","SkipAudit","SkipExistingCheck","Identifier","ImportReportMode","PreheatMode","ImportStrategy","AtomicMode","MergeMode","FlushMode","InclusionStrategy","SkipSharing","SkipValidation","IsAsync","orgValidator","composeValidators","hasValue","dataSetValidator","programValidator","IncludeChildren","IncludeDeleted","Compression","availableCompressions","Inclusion","StartDate","EndDate","ExportButton","programStage","props","findLabelByLowerCaseComparison","groupKey","schemas","foundLabel","schemaName","toLowerCase","isGroupKeyMatchingLowerCaseSchemaName","findKeyByCamelCaseComparison","indexOf","isGroupKeyInSchemaName","str","substr","replace","toUpperCase","getSchemaGroups","groups","combinedGroups","groupName","group","other","combineSingleItemGroups","schema","groupSchemas","getGroupLabels","schemaGroups","entries","groupLabels","lowerCaseGroupKey","extractGroupLabelFromSchemas","pop","SchemaGroup","toggleSchema","formLabel","ind","schemaQuery","Schemas","excludeSchemas","setCheckedSchemas","checkedByDefault","setSchemaGroups","schemaGroupLabels","setSchemaGroupLabels","schemaGroupOrder","setSchemaGroupOrder","formattedSchemas","collectionName","formatSchemas","excludedSchemas","has","filterOutExcludedSchemas","groupKeys","getGroupOrder","propagateCheckedSchemas","updatedSchemaGroups","onSelectGeneric","grAcc","showSchemas","formControl","schemaGroup","updatedGroup","SchemasField","checkedSchemas","EXCLUDE_SCHEMAS","Set","ObjectType","filled","initialFocus","Objects","objectType","objectsLoading","objectsError","objectsValidationText","objects","setObjects","useObjects","FORM_ERROR","values","classKey","PAGE_NAME","PAGE_DESCRIPTION","PAGE_ICON","MetadataImport","metadataTasks","useLocation","prevJobDetails","initialValues","identifier","importReportMode","preheatMode","importStrategy","firstRowIsHeader","atomicMode","mergeMode","flushMode","inclusionStrategy","skipSharing","skipValidation","isAsync","createInitialValues","progress","setShowFullSummaryTask","baseUrl","useConfig","onSubmit","apiBaseUrl","formErrors","onImport","subscription","submitError","render","handleSubmit","MetadataExport","endpointExtension","schemaParams","downloadUrlParams","onExport","MetadataDependencyExport","endpoint","types","GMLImport","gmlTasks","EventImport","eventTasks","dataElementIdScheme","orgUnitIdScheme","eventIdScheme","startDate","endDate","today","includeDeleted","idScheme","inclusion","EventExport","hasAuthorityToSkipAudit","authorities","DataImport","dataTasks","strategy","preheatCache","skipAudit","skipExistingCheck","WithAuthority","pred","dataValueSetQuery","sets","orgUnit","dataSet","includeChildren","dataStr","stringify","zip","JSZip","generateAsync","then","URL","createObjectURL","contents","Blob","createBlob","errors","DataExport","Router","from","Select","noMatchText","helpText","optionEls","setFilter","onSelect","actions","action","all","dataImportPage","code","eventImportPage","gmlImportPage","metadataImportPage","dataExportPage","eventExportPage","metadataDependencyExportPage","metadataExportPage","importPages","exportPages","jobOverviewPage","SidebarItem","StyledLink","Sidebar","sectionTitle","passThroughProps","SwitchUI","App","log","useUser","showApp","Provider","sidebar"],"mappings":"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","file":"static/js/app.e08e191c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Schemas_container__3H0XX\",\"group\":\"Schemas_group__QeGXq\",\"schema\":\"Schemas_schema__36IFP\",\"formLabel\":\"Schemas_formLabel__1geS0\",\"formControl\":\"Schemas_formControl__2ycln\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2zgzu\",\"sidebar\":\"App_sidebar__10tAV\",\"content\":\"App_content__3I8HS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FormAlerts_container__JPYH9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FormField_container__3nG83\",\"label\":\"FormField_label__2Au43\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dryRun\":\"ImportButtonStrip_dryRun__112kw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"JobOverview_container__1_oyo\",\"items\":\"JobOverview_items__2B1hs\",\"Menu\":\"JobOverview_Menu__2bTUp\",\"summary\":\"JobOverview_summary__13xs1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MenuLabel_container__ZTyjb\",\"status\":\"MenuLabel_status__1UTMj\",\"date\":\"MenuLabel_date__1r_sY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"JobSummary_container__2Zh6N\",\"title\":\"JobSummary_title__sZ7p4\",\"taskDetails\":\"JobSummary_taskDetails__3aEqI\",\"tags\":\"JobSummary_tags__3qnhf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MoreOptions_container__2zKqV\",\"header\":\"MoreOptions_header__120Ww\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"OrgUnitTree_container__tSgX2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Page_container__3NEqL\",\"content\":\"Page_content__39Ql1\",\"preBody\":\"Page_preBody__3d4Jp\",\"header\":\"Page_header__13-dA\",\"title\":\"Page_title__rl9Ut\",\"desc\":\"Page_desc__2uKSe\",\"icon\":\"Page_icon__20L2r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputs\":\"RadioGroup_inputs__2MDMV\",\"radio\":\"RadioGroup_radio__2G6wY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"JobOverview_container__F-fbL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"Select_select__3_2MB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"SelectableList_body__80Xuu\",\"filter\":\"SelectableList_filter__SHsK2\",\"actions\":\"SelectableList_actions__1Pw1O\",\"action\":\"SelectableList_action__kmkJr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Menu\":\"Sidebar_Menu__3Gy0D\",\"sectionTitle\":\"Sidebar_sectionTitle__lKKbo\",\"jobOverview\":\"Sidebar_jobOverview__2MJ0c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"StyledLink_link__1GAq7\"};","import React from 'react';\nconst UserContext = React.createContext(undefined);\nexport { UserContext };","import React from 'react';\nconst TaskContext = React.createContext(undefined);\n\nconst getNewestTask = tasks => Object.keys(tasks).map(k => tasks[k]).sort((a, b) => a.created < b.created ? 1 : -1)[0];\n\nexport { TaskContext, getNewestTask };","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst createStyle = (width, height) => ({\n  width: width || 24,\n  height: height || 24,\n  display: 'inline-block',\n  fill: 'current-color',\n  color: 'current-color',\n  userSelect: 'none'\n});\n\nexport const MetadataImportIcon = ({\n  width,\n  height\n}) => <svg viewBox=\"0 0 24 24\" style={createStyle(width, height)} data-test=\"icon-metadataimport\">\n        <path d=\"M14.039 8.968l-3.961-3.968h1.968s.991-3.178-2.985-5c6.191.222 6.972 5 6.972 5h1.967l-3.961 3.968zm6.461 5.575l-.342.195v1.717l.342-.195v-1.717zm-.844.481l-.35.199v1.717l.35-.199v-1.717zm.906-10.024l-1.306 1.55 1.62.919-6.859 3.698-8.86-5.138 4.436-2.685c-.234-.5-.626-.989-1.313-1.338l-5.124 2.978-3.156 5.487 2 1.106v5.445l12.25 6.978 9.75-5.551v-11.508l-3.438-1.941zm-16.624 2.688l7.897 4.54-1.192 2.091-7.872-4.605 1.167-2.026zm9.062 13.298l-9-5.126v-3.112l7.377 4.319 1.623-2.845v6.764zm9-3.7l-7 3.985v-8.361l7-3.773v8.149zm-4.907-.802l-.349.199v1.713l.349-.195v-1.717zm.584-.333l-.343.195v1.717l.343-.195v-1.717zm1.395-.794l-.343.195v1.717l.343-.195v-1.717zm-.574.327l-.344.196v1.717l.344-.196v-1.717z\" />\n    </svg>;\nexport const MetadataExportIcon = ({\n  width,\n  height\n}) => <svg viewBox=\"0 0 24 24\" style={createStyle(width, height)} data-test=\"icon-metadataexport\">\n        <path d=\"M13.904 9c-3.514-3.984-.1-7.598-.1-7.598l-1.393-1.389 5.589-.013v5.607l-1.372-1.391c0 .001-3.581.706-2.724 4.784zm5.752 6.024l-.35.199v1.717l.35-.199v-1.717zm.844-.481l-.342.195v1.717l.342-.195v-1.717zm-3.407 1.941l-.349.199v1.713l.349-.195v-1.717zm1.979-1.127l-.343.195v1.717l.343-.195v-1.717zm.949-10.673v2.295l.855.489-6.859 3.698-8.86-5.138 6.374-3.654-1.5-1.406-6.864 3.97-3.167 5.533 2 1.106v5.445l12.25 6.978 9.75-5.551v-11.508l-3.979-2.257zm-16.083 3.004l7.897 4.54-1.193 2.091-7.871-4.605 1.167-2.026zm9.062 13.298l-9-5.126v-3.112l5.632 3.297 1.746 1.022 1.002-1.757.62-1.088v6.764zm9-3.7l-7 3.985v-8.361l7-3.773v8.149zm-4.323-1.135l-.343.195v1.717l.343-.195v-1.717zm.821-.467l-.344.196v1.717l.344-.196v-1.717z\" />\n    </svg>;\nexport const MetadataDependencyExportIcon = ({\n  width,\n  height\n}) => <svg viewBox=\"0 0 24 24\" style={createStyle(width, height)} data-test=\"icon-metadatadependencyexport\">\n        <path d=\"M16.949 16.132h2.332c-1.092 1.728-3.605 3.638-6.281 3.852v-8.984h3v-2h-3v-1.103c0-2.39 2-2.619 2-4.897 0-1.654-1.346-3-3-3s-3 1.346-3 3c0 2.297 2 2.487 2 4.897v1.103h-3v2h3v9c-2.639-.18-5.133-2.053-6.281-3.868h2.332l-5.051-3.132v5.912l1.269-1.8c2.702 4.503 6.379 4.305 8.731 6.888 2.352-2.583 6.029-2.385 8.731-6.889l1.269 1.8v-5.911l-5.051 3.132zm-5.949-13.132c0-.551.449-1 1-1s1 .449 1 1-.448 1-1 1-1-.449-1-1z\" />\n    </svg>;\nexport const DataIcon = ({\n  width,\n  height\n}) => <svg viewBox=\"0 0 24 24\" style={createStyle(width, height)} data-test=\"icon-data\">\n        <path d=\"M6.083 4c1.38 1.612 2.578 3 4.917 3h11v13h-20v-16h4.083zm.917-2h-7v20h24v-17h-13c-1.629 0-2.305-1.058-4-3z\" />\n    </svg>;\nexport const EventIcon = ({\n  width,\n  height\n}) => <svg viewBox=\"0 0 24 24\" style={createStyle(width, height)} data-test=\"icon-event\">\n        <path d=\"M20 20h-4v-4h4v4zm-6-10h-4v4h4v-4zm6 0h-4v4h4v-4zm-12 6h-4v4h4v-4zm6 0h-4v4h4v-4zm-6-6h-4v4h4v-4zm16-8v22h-24v-22h3v1c0 1.103.897 2 2 2s2-.897 2-2v-1h10v1c0 1.103.897 2 2 2s2-.897 2-2v-1h3zm-2 6h-20v14h20v-14zm-2-7c0-.552-.447-1-1-1s-1 .448-1 1v2c0 .552.447 1 1 1s1-.448 1-1v-2zm-14 2c0 .552-.447 1-1 1s-1-.448-1-1v-2c0-.552.447-1 1-1s1 .448 1 1v2z\" />\n    </svg>;\nexport const GMLIcon = ({\n  width,\n  height\n}) => <svg viewBox=\"0 0 24 24\" style={createStyle(width, height)} data-test=\"icon-gml\">\n        <path d=\"M13.144 8.171c-.035-.066.342-.102.409-.102.074.009-.196.452-.409.102zm-2.152-3.072l.108-.031c.064.055-.072.095-.051.136.086.155.021.248.008.332-.014.085-.104.048-.149.093-.053.066.258.075.262.085.011.033-.375.089-.304.171.096.136.824-.195.708-.176.225-.113.029-.125-.097-.19-.043-.215-.079-.547-.213-.68l.088-.102c-.206-.299-.36.362-.36.362zm13.008 6.901c0 6.627-5.373 12-12 12-6.628 0-12-5.373-12-12s5.372-12 12-12c6.627 0 12 5.373 12 12zm-8.31-5.371c-.006-.146-.19-.284-.382-.031-.135.174-.111.439-.184.557-.104.175.567.339.567.174.025-.277.732-.063.87-.025.248.069.643-.226.211-.381-.355-.13-.542-.269-.574-.523 0 0 .188-.176.106-.166-.218.027-.614.786-.614.395zm6.296 5.371c0-1.035-.177-2.08-.357-2.632-.058-.174-.189-.312-.359-.378-.256-.1-1.337.597-1.5.254-.107-.229-.324.146-.572.008-.12-.066-.454-.515-.605-.46-.309.111.474.964.688 1.076.201-.152.852-.465.992-.038.268.804-.737 1.685-1.251 2.149-.768.694-.624-.449-1.147-.852-.275-.211-.272-.66-.55-.815-.124-.07-.693-.725-.688-.813l-.017.166c-.094.071-.294-.268-.315-.321 0 .295.48.765.639 1.001.271.405.416.995.748 1.326.178.178.858.914 1.035.898.193-.017.803-.458.911-.433.644.152-1.516 3.205-1.721 3.583-.169.317.138 1.101.113 1.476-.029.433-.37.573-.693.809-.346.253-.265.745-.556.925-.517.318-.889 1.353-1.623 1.348-.216-.001-1.14.36-1.261.007-.094-.256-.22-.45-.353-.703-.13-.248-.015-.505-.173-.724-.109-.152-.475-.497-.508-.677-.002-.155.117-.626.28-.708.229-.117.044-.458.016-.656-.048-.354-.267-.646-.53-.851-.389-.299-.188-.537-.097-.964 0-.204-.124-.472-.398-.392-.564.164-.393-.44-.804-.413-.296.021-.538.209-.813.292-.346.104-.7-.082-1.042-.125-1.407-.178-1.866-1.786-1.499-2.946.037-.19-.114-.542-.048-.689.158-.352.48-.747.762-1.014.158-.15.361-.112.547-.229.287-.181.291-.553.572-.781.4-.325.946-.318 1.468-.388.278-.037 1.336-.266 1.503-.06 0 .038.191.604-.019.572.433.023 1.05.749 1.461.579.211-.088.134-.736.567-.423.262.188 1.436.272 1.68.069.15-.124.234-.93.052-1.021.116.115-.611.124-.679.098-.12-.044-.232.114-.425.025.116.055-.646-.354-.218-.667-.179.131-.346-.037-.539.107-.133.108.062.18-.128.274-.302.153-.53-.525-.644-.602-.116-.076-1.014-.706-.77-.295l.789.785c-.039.025-.207-.286-.207-.059.053-.135.02.579-.104.347-.055-.089.09-.139.006-.268 0-.085-.228-.168-.272-.226-.125-.155-.457-.497-.637-.579-.05-.023-.764.087-.824.11-.07.098-.13.201-.179.311-.148.055-.287.126-.419.214l-.157.353c-.068.061-.765.291-.769.3.029-.075-.487-.171-.453-.321.038-.165.213-.68.168-.868-.048-.197 1.074.284 1.146-.235.029-.225.046-.487-.313-.525.068.008.695-.246.799-.36.146-.168.481-.442.724-.442.284 0 .223-.413.354-.615.131.053-.07.376.087.507-.01-.103.445.057.489.033.104-.054.684-.022.594-.294-.1-.277.051-.195.181-.253-.022.009.34-.619.402-.413-.043-.212-.421.074-.553.063-.305-.024-.176-.52-.061-.665.089-.115-.243-.256-.247-.036-.006.329-.312.627-.241 1.064.108.659-.735-.159-.809-.114-.28.17-.509-.214-.364-.444.148-.235.505-.224.652-.476.104-.178.225-.385.385-.52.535-.449.683-.09 1.216-.041.521.048.176.124.104.324-.069.19.286.258.409.099.07-.092.229-.323.298-.494.089-.222.901-.197.334-.536-.374-.223-2.004-.672-3.096-.672-.236 0-.401.263-.581.412-.356.295-1.268.874-1.775.698-.519-.179-1.63.66-1.808.666-.065.004.004-.634.358-.681-.153.023 1.247-.707 1.209-.859-.046-.18-2.799.822-2.676 1.023.059.092.299.092-.016.294-.18.109-.372.801-.541.801-.505.221-.537-.435-1.099.409l-.894.36c-1.328 1.411-2.247 3.198-2.58 5.183-.013.079.334.226.379.28.112.134.112.712.167.901.138.478.479.744.74 1.179.154.259.41.914.329 1.186.108-.178 1.07.815 1.246 1.022.414.487.733 1.077.061 1.559-.217.156.33 1.129.048 1.368l-.361.093c-.356.219-.195.756.021.982 1.818 1.901 4.38 3.087 7.22 3.087 5.517 0 9.989-4.472 9.989-9.989zm-11.507-6.357c.125-.055.293-.053.311-.22.015-.148.044-.046.08-.1.035-.053-.067-.138-.11-.146-.064-.014-.108.069-.149.104l-.072.019-.068.087.008.048-.087.106c-.085.084.002.139.087.102z\" />\n    </svg>;\nexport const LogoIcon = ({\n  width,\n  height\n}) => <svg viewBox=\"0 0 24 24\" style={createStyle(width, height)} data-test=\"icon-logo\">\n        <path d=\"M9 3L5 6.99h3V14h2V6.99h3L9 3zm7 14.01V10h-2v7.01h-3L15 21l4-3.99h-3z\" />\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    </svg>;\nexport const PlusIcon = ({\n  width,\n  height\n}) => <svg viewBox=\"0 0 24 24\" style={createStyle(width, height)} data-test=\"icon-plus\">\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" />\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    </svg>;\nexport const MinusIcon = ({\n  width,\n  height\n}) => <svg viewBox=\"0 0 24 24\" style={createStyle(width, height)} data-test=\"icon-minus\">\n        <path d=\"M19 13H5v-2h14v2z\" />\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    </svg>;\nexport const TasksIcon = ({\n  width,\n  height\n}) => <svg viewBox=\"0 0 24 24\" style={createStyle(width, height)} data-test=\"icon-tasks\">\n        <path d=\"M19 2h-4.2C14.4.8 13.3 0 12 0c-1.3 0-2.4.8-2.8 2H5C4 2 3 3 3 4v16c0 1 1 2 2 2h14c1 0 2-1 2-2V4c0-1-1-2-2-2zm-7 0c.6 0 1 .5 1 1s-.5 1-1 1-1-.5-1-1 .5-1 1-1zm7 18H5V4h2v3h10V4h2v16z\"></path>\n    </svg>;\nconst iconPropTypes = {\n  height: PropTypes.number,\n  width: PropTypes.number\n};\nDataIcon.propTypes = iconPropTypes;\nEventIcon.propTypes = iconPropTypes;\nGMLIcon.propTypes = iconPropTypes;\nLogoIcon.propTypes = iconPropTypes;\nMetadataDependencyExportIcon.propTypes = iconPropTypes;\nMetadataExportIcon.propTypes = iconPropTypes;\nMetadataImportIcon.propTypes = iconPropTypes;\nMinusIcon.propTypes = iconPropTypes;\nPlusIcon.propTypes = iconPropTypes;\nTasksIcon.propTypes = iconPropTypes;","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { DataIcon, EventIcon, GMLIcon, MetadataImportIcon } from '../components/Icon/Icon';\nconst categoryTypes = [{\n  key: 'data',\n  importType: 'DATAVALUE_IMPORT',\n  icon: <DataIcon />,\n  label: i18n.t('Data')\n}, {\n  key: 'event',\n  importType: 'EVENT_IMPORT',\n  icon: <EventIcon />,\n  label: i18n.t('Event')\n}, {\n  key: 'gml',\n  importType: 'GML_IMPORT',\n  icon: <GMLIcon />,\n  label: i18n.t('GML')\n}, {\n  key: 'metadata',\n  importType: 'METADATA_IMPORT',\n  icon: <MetadataImportIcon />,\n  label: i18n.t('Metadata')\n}];\nconst allCategories = categoryTypes.map(({\n  importType\n}) => importType);\nexport { categoryTypes, allCategories };","import { useState } from 'react';\nimport { useDataEngine } from '@dhis2/app-runtime';\nimport { allCategories } from '../utils/tasks';\nconst jobEventQuery = {\n  events: {\n    resource: 'system/tasks/',\n    id: ({\n      type,\n      taskId\n    }) => `${type}/${taskId}`\n  }\n};\nconst jobSummaryQuery = {\n  summary: {\n    resource: 'system/taskSummaries/',\n    id: ({\n      type,\n      taskId\n    }) => `${type}/${taskId}`\n  }\n};\nconst defaultTasks = {\n  data: {},\n  event: {},\n  gml: {},\n  metadata: {}\n};\nconst defaultJobOverview = {\n  activeTypes: allCategories,\n  selectedJob: undefined\n};\nconst defaultRefetchPeriod = 2000;\n\nconst createFetchEvents = (engine, setTasks, fetchSummary) => (type, id, task) => {\n  const fetchEvents = async () => {\n    if (task.completed) {\n      return;\n    }\n\n    const newTask = { ...task\n    };\n    const {\n      events,\n      error\n    } = await engine.query(jobEventQuery, {\n      variables: {\n        type: task.importType,\n        taskId: task.id\n      }\n    });\n\n    if (error) {\n      console.error('fetchEvents error: ', error);\n      return;\n    }\n\n    if (events && events.length) {\n      const newEvents = events.filter(e => !task.events.some(te => te.id == e.uid)).map(e => ({\n        id: e.uid,\n        level: e.level,\n        text: e.message,\n        date: new Date(e.time)\n      }));\n      const errorEvent = newEvents.find(e => e.level == 'ERROR');\n\n      if (errorEvent) {\n        newTask.error = errorEvent.text;\n      }\n\n      newTask.events = [...newTask.events, ...newEvents.reverse()];\n      newTask.completed = events[0].completed;\n    }\n\n    newTask.lastUpdated = new Date();\n\n    if (!newTask.completed) {\n      setTimeout(() => fetchEvents(type, id, newTask), defaultRefetchPeriod);\n    } else {\n      fetchSummary(type, id, newTask);\n    }\n\n    setTasks(tasks => ({ ...tasks,\n      [type]: { ...tasks[type],\n        [id]: newTask\n      }\n    }));\n  };\n\n  fetchEvents();\n};\n\nconst createFetchSummary = (engine, setTasks) => async (type, id, task) => {\n  const newTask = { ...task\n  };\n  const {\n    summary,\n    error\n  } = await engine.query(jobSummaryQuery, {\n    variables: {\n      type: task.importType,\n      taskId: task.id\n    }\n  });\n\n  if (error) {\n    console.error('fetchSummary error: ', error);\n    return;\n  }\n\n  if (summary && summary.status == 'ERROR' && !newTask.error) {\n    newTask.error = true;\n  }\n\n  newTask.summary = summary;\n  setTasks(tasks => ({ ...tasks,\n    [type]: { ...tasks[type],\n      [id]: newTask\n    }\n  }));\n};\n\nconst createAddTask = (setTasks, fetchEvents) => (type, id, entry) => {\n  setTasks(tasks => ({ ...tasks,\n    [type]: { ...tasks[type],\n      [id]: entry\n    }\n  }));\n  fetchEvents(type, id, entry);\n};\n\nconst createUpdateJobOverview = setJobOverview => val => {\n  setJobOverview(jobOverview => ({ ...jobOverview,\n    ...val\n  }));\n};\n\nconst useTasks = () => {\n  const engine = useDataEngine();\n  const [tasks, setTasks] = useState(defaultTasks);\n  const [jobOverview, setJobOverview] = useState(defaultJobOverview);\n  const fetchSummary = createFetchSummary(engine, setTasks);\n  const fetchEvents = createFetchEvents(engine, setTasks, fetchSummary);\n  const addTask = createAddTask(setTasks, fetchEvents);\n  const updateJobOverview = createUpdateJobOverview(setJobOverview);\n  return {\n    tasks,\n    addTask,\n    jobOverview,\n    updateJobOverview\n  };\n};\n\nexport { useTasks };","import { useDataQuery } from '@dhis2/app-runtime';\nconst userQuery = {\n  user: {\n    resource: 'me'\n  }\n};\n\nconst useUser = () => {\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(userQuery);\n\n  if (error) {\n    console.log('useUser error: ', error);\n  }\n\n  return {\n    loading,\n    error,\n    user: data && data.user\n  };\n};\n\nexport { useUser };","import { useState, useEffect } from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { useDataEngine } from '@dhis2/app-runtime';\nconst programStageQuery = {\n  data: {\n    resource: 'programs',\n    fields: 'id,displayName',\n    id: ({\n      id\n    }) => `${id}`,\n    params: {\n      fields: 'programStages[id,displayName]',\n      paging: 'false'\n    }\n  }\n};\nconst ALL_VALUE = '';\nconst ALL_LABEL = `[ ${i18n.t('All program stages')} ]`;\n\nconst useProgramStages = (program, setSelected) => {\n  const engine = useDataEngine();\n  const [error, setError] = useState(undefined);\n  const [loading, setLoading] = useState(true);\n  const [stages, setStages] = useState([]);\n  useEffect(() => {\n    if (program) {\n      setLoading(true);\n      setSelected(undefined);\n    } else {\n      setLoading(false);\n    }\n\n    if (program) {\n      engine.query(programStageQuery, {\n        variables: {\n          id: program\n        },\n        onComplete: data => {\n          const list = data.data.programStages;\n          const formattedList = list.map(e => ({\n            value: e.id,\n            label: e.displayName\n          }));\n          setStages([{\n            value: ALL_VALUE,\n            label: ALL_LABEL\n          }, ...formattedList]);\n          setSelected({\n            value: ALL_VALUE,\n            label: ALL_LABEL\n          });\n          setLoading(false);\n        },\n        onError: error => {\n          setError(error);\n          console.error('useProgramStages error: ', error);\n        }\n      });\n    }\n  }, [program]);\n  const validationText = error && `${i18n.t('Something went wrong when loading the program stages')} : ${error.message}`;\n  return {\n    loading,\n    error,\n    validationText,\n    programStages: stages\n  };\n};\n\nexport { useProgramStages, ALL_VALUE };","import { useState } from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { useDataQuery } from '@dhis2/app-runtime';\nconst classKeyQuery = {\n  keys: {\n    resource: 'metadata/csvImportClasses'\n  }\n};\n\nconst useClassKeys = (setValue, prevValue) => {\n  const [classKeys, setClassKeys] = useState([]);\n  const {\n    loading,\n    error\n  } = useDataQuery(classKeyQuery, {\n    onComplete: classData => {\n      setClassKeys(classData.keys.map(k => ({\n        value: k,\n        label: k\n      })));\n\n      if (prevValue) {\n        setValue(prevValue);\n      } else {\n        setValue({\n          value: classData.keys[0],\n          label: classData.keys[0]\n        });\n      }\n    },\n    onError: error => {\n      console.error('useClassKeys error: ', error);\n    }\n  });\n  const validationText = error && `${i18n.t('Something went wrong when loading the class keys')} : ${error.message}`;\n  return {\n    loading,\n    error,\n    validationText,\n    classKeys\n  };\n};\n\nexport { useClassKeys };","import PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nconst formatOptions = [{\n  value: 'json',\n  label: i18n.t('JSON')\n}, {\n  value: 'csv',\n  label: i18n.t('CSV')\n}, {\n  value: 'xml',\n  label: i18n.t('XML')\n}];\nconst formatNoCsvOptions = formatOptions.filter(f => f.value != 'csv');\nconst formatAdxOptions = [...formatOptions, {\n  value: 'adx',\n  label: i18n.t('ADX')\n}];\nconst formatAdxPdfOptions = [...formatAdxOptions, {\n  value: 'pdf',\n  label: i18n.t('PDF')\n}];\nconst compressionOptions = [{\n  value: 'zip',\n  label: i18n.t('Zip')\n}, {\n  value: 'gz',\n  label: i18n.t('GZip')\n}, {\n  value: '',\n  label: i18n.t('Uncompressed')\n}];\nconst objectTypeOptions = [{\n  value: 'dataSets',\n  label: i18n.t('Data sets')\n}, {\n  value: 'programs',\n  label: i18n.t('Programs')\n}, {\n  value: 'categoryCombos',\n  label: i18n.t('Category combination')\n}, {\n  value: 'dashboards',\n  label: i18n.t('Dashboard')\n}, {\n  value: 'dataElementGroups',\n  label: i18n.t('Data element groups')\n}, {\n  value: 'optionSets',\n  label: i18n.t('Option sets')\n}];\nconst dataElementIdSchemeOptions = [{\n  value: 'UID',\n  label: i18n.t('Uid')\n}, {\n  value: 'CODE',\n  label: i18n.t('Code')\n}, {\n  value: 'NAME',\n  label: i18n.t('Name')\n}];\nconst orgUnitIdSchemeOptions = [{\n  value: 'UID',\n  label: i18n.t('Uid')\n}, {\n  value: 'CODE',\n  label: i18n.t('Code')\n}, {\n  value: 'NAME',\n  label: i18n.t('Name')\n}];\nconst idSchemeOptions = [{\n  value: 'UID',\n  label: i18n.t('Uid')\n}, {\n  value: 'CODE',\n  label: i18n.t('Code')\n}];\nconst eventIdSchemeOptions = [...idSchemeOptions];\nconst inclusionOptions = [{\n  value: 'SELECTED',\n  label: i18n.t('Selected organisation unit')\n}, {\n  value: 'CHILDREN',\n  label: i18n.t('Include children of organisation unit')\n}, {\n  value: 'DESCENDANTS',\n  label: i18n.t('Include descendants of organisation unit')\n}];\nconst skipExisitingCheckOptions = [{\n  value: 'true',\n  label: i18n.t('Skip check'),\n  help: 'fast'\n}, {\n  value: 'false',\n  label: i18n.t('Check'),\n  help: 'safe, recommended'\n}];\nconst strategyOptions = [{\n  value: 'NEW_AND_UPDATES',\n  label: i18n.t('New and updates')\n}, {\n  value: 'NEW',\n  label: i18n.t('New only')\n}, {\n  value: 'UPDATES',\n  label: i18n.t('Updates only')\n}, {\n  value: 'DELETE',\n  label: i18n.t('Delete')\n}];\nconst importStrategyOptions = [{\n  value: 'CREATE_AND_UPDATE',\n  label: i18n.t('New and updates')\n}, {\n  value: 'CREATE',\n  label: i18n.t('New only')\n}, {\n  value: 'UPDATES',\n  label: i18n.t('Updates only')\n}, {\n  value: 'DELETE',\n  label: i18n.t('Delete')\n}];\nconst identifierOptions = [{\n  value: 'UID',\n  label: i18n.t('UID')\n}, {\n  value: 'CODE',\n  label: i18n.t('Code')\n}, {\n  value: 'AUTO',\n  label: i18n.t('Auto')\n}];\nconst importReportModeOptions = [{\n  value: 'ERRORS',\n  label: i18n.t('Errors')\n}, {\n  value: 'FULL',\n  label: i18n.t('Full')\n}, {\n  value: 'DEBUG',\n  label: i18n.t('Debug')\n}];\nconst preheatModeOptions = [{\n  value: 'REFERENCE',\n  label: i18n.t('Reference')\n}, {\n  value: 'ALL',\n  label: i18n.t('All')\n}, {\n  value: 'NONE',\n  label: i18n.t('None')\n}];\nconst atomicModeOptions = [{\n  value: 'ALL',\n  label: i18n.t('All')\n}, {\n  value: 'NONE',\n  label: i18n.t('None')\n}];\nconst mergeModeOptions = [{\n  value: 'MERGE',\n  label: i18n.t('Merge')\n}, {\n  value: 'REPLACE',\n  label: i18n.t('Replace')\n}];\nconst flushModeOptions = [{\n  value: 'AUTO',\n  label: i18n.t('Auto')\n}, {\n  value: 'OBJECT',\n  label: i18n.t('Object')\n}];\nconst inclusionStrategyOptions = [{\n  value: 'NON_NULL',\n  label: i18n.t('Non Null')\n}, {\n  value: 'ALWAYS',\n  label: i18n.t('Always')\n}, {\n  value: 'NON_EMPTY',\n  label: i18n.t('Non Empty')\n}];\nconst defaultFormatOption = formatOptions[0];\nconst defaultCompressionOption = compressionOptions[0];\nconst defaultObjectTypeOption = objectTypeOptions[0];\nconst defaultDataElementIdSchemeOption = dataElementIdSchemeOptions[0];\nconst defaultOrgUnitIdSchemeOption = orgUnitIdSchemeOptions[0];\nconst defaultIdSchemeOption = idSchemeOptions[0];\nconst defaultEventIdSchemeOption = eventIdSchemeOptions[0];\nconst defaultInclusionOption = inclusionOptions[0];\nconst defaultSkipExisitingCheckOption = skipExisitingCheckOptions[0];\nconst defaultStrategyOption = strategyOptions[0];\nconst defaultIdentifierOption = identifierOptions[0];\nconst defaultImportReportModeOption = importReportModeOptions[0];\nconst defaultPreheatModeOption = preheatModeOptions[0];\nconst defaultImportStrategyOption = importStrategyOptions[0];\nconst defaultAtomicModeOption = atomicModeOptions[0];\nconst defaultMergeModeOption = mergeModeOptions[0];\nconst defaultFlushModeOption = flushModeOptions[0];\nconst defaultInclusionStrategyOption = inclusionStrategyOptions[0];\nconst optionPropType = PropTypes.exact({\n  value: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired\n});\nconst optionsPropType = PropTypes.arrayOf(optionPropType);\nexport { formatOptions, formatNoCsvOptions, formatAdxOptions, formatAdxPdfOptions, compressionOptions, objectTypeOptions, dataElementIdSchemeOptions, orgUnitIdSchemeOptions, idSchemeOptions, eventIdSchemeOptions, inclusionOptions, skipExisitingCheckOptions, strategyOptions, identifierOptions, importReportModeOptions, preheatModeOptions, importStrategyOptions, atomicModeOptions, mergeModeOptions, flushModeOptions, inclusionStrategyOptions, defaultFormatOption, defaultCompressionOption, defaultObjectTypeOption, defaultDataElementIdSchemeOption, defaultOrgUnitIdSchemeOption, defaultIdSchemeOption, defaultEventIdSchemeOption, defaultInclusionOption, defaultSkipExisitingCheckOption, defaultStrategyOption, defaultIdentifierOption, defaultImportReportModeOption, defaultPreheatModeOption, defaultImportStrategyOption, defaultAtomicModeOption, defaultMergeModeOption, defaultFlushModeOption, defaultInclusionStrategyOption, optionPropType, optionsPropType };","import React from 'react';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { dataElementIdSchemeOptions } from '../../utils/options';\nimport { SelectField } from '../';\nconst schemeQuery = {\n  data: {\n    resource: 'attributes',\n    params: {\n      filter: ['unique:eq:true', 'dataElementAttribute:eq:true'],\n      fields: ['id', 'displayName'],\n      paging: 'false'\n    }\n  }\n};\n\nconst DataElementIdScheme = ({\n  name,\n  label,\n  dataTest\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(schemeQuery);\n  const validationText = error && `${i18n.t('Something went wrong when loading the additional data element ID schemes')} : ${error.message}`;\n  const schemes = data ? data.data.attributes.map(({\n    id,\n    displayName\n  }) => ({\n    value: `ATTRIBUTE:${id}`,\n    label: displayName\n  })) : [];\n  const options = [...dataElementIdSchemeOptions, ...schemes];\n  return <SelectField name={name} label={label} options={options} dataTest={dataTest} loading={loading} validationText={validationText} error={!!error} dense />;\n};\n\nDataElementIdScheme.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired\n};\nexport { DataElementIdScheme };","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport i18n from '@dhis2/d2-i18n';\nimport { CircularLoader, Help } from '@dhis2/ui-core';\nimport { FormField, SelectableList } from '../';\nconst dataSetQuery = {\n  dataSets: {\n    resource: 'dataSets',\n    params: {\n      fields: 'id,displayName',\n      paging: 'false'\n    }\n  }\n};\n\nconst DataSetPicker = ({\n  label,\n  selected,\n  setSelected,\n  meta,\n  multiSelect = true,\n  withFilter = true,\n  withActions = true,\n  dataTest\n}) => {\n  const [list, setList] = useState([]);\n  const [error, setError] = useState(undefined);\n  const {\n    loading\n  } = useDataQuery(dataSetQuery, {\n    onComplete: data => {\n      const dataSets = data.dataSets.dataSets;\n      const list = dataSets.map(({\n        id,\n        displayName\n      }) => ({\n        value: id,\n        label: displayName\n      }));\n      setList(list);\n    },\n    onError: error => {\n      setError(error);\n      console.error('DataSetPicker error: ', error);\n    }\n  });\n  const showList = !loading && !error;\n  return <FormField label={label} dataTest={dataTest}>\n            {loading && <CircularLoader dataTest={`${dataTest}-loading`} />}\n            {error && <div data-test={`${dataTest}-error`}>\n                    <p>\n                        {i18n.t('Something went wrong when loading the data sets!')}\n                    </p>\n                    <p>{error.message}</p>\n                </div>}\n            {showList && <SelectableList name=\"dataSetPicker\" label={i18n.t('Filter data sets by name')} selected={selected} setSelected={setSelected} multiSelect={multiSelect} list={list} withFilter={withFilter} withActions={withActions} dataTest={`${dataTest}-list`} />}\n            {(meta.touched || !meta.pristine) && meta.error && <Help error>{meta.error}</Help>}\n        </FormField>;\n};\n\nDataSetPicker.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  meta: PropTypes.object.isRequired,\n  selected: PropTypes.arrayOf(PropTypes.string).isRequired,\n  setSelected: PropTypes.func.isRequired,\n  multiSelect: PropTypes.bool,\n  withActions: PropTypes.bool,\n  withFilter: PropTypes.bool\n};\nexport { DataSetPicker };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Field } from '@dhis2/ui-forms';\nimport { DataSetPicker } from '../';\n\nconst SINGLE_DATASET_VALIDATOR = selectedDataSets => selectedDataSets.length == 0 ? i18n.t('At least one data set must be selected') : undefined;\n\nconst SINGLE_EXACT_DATASET_VALIDATOR = selectedDataSets => selectedDataSets.length != 1 ? i18n.t('One data set must be selected') : undefined;\n\nconst Wrapper = ({\n  input: {\n    value,\n    onChange\n  },\n  meta,\n  ...rest\n}) => <DataSetPicker meta={meta} selected={value} setSelected={onChange} {...rest} />;\n\nWrapper.propTypes = {\n  input: PropTypes.shape({\n    value: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onChange: PropTypes.func\n  }).isRequired,\n  meta: PropTypes.shape({\n    error: PropTypes.string,\n    pristine: PropTypes.bool,\n    touched: PropTypes.bool\n  }).isRequired\n};\n\nconst DataSetPickerField = ({\n  name,\n  validator,\n  ...rest\n}) => {\n  return <Field component={Wrapper} name={name} validate={validator} {...rest} />;\n};\n\nDataSetPickerField.propTypes = {\n  name: PropTypes.string.isRequired,\n  validator: PropTypes.func\n};\nexport { DataSetPickerField, SINGLE_DATASET_VALIDATOR, SINGLE_EXACT_DATASET_VALIDATOR };","const mapping = {\n  json: 'application/json',\n  xml: 'application/xml',\n  csv: 'application/csv',\n  gml: 'application/xml',\n  adx: 'application/adx+xml',\n  pdf: 'application/pdf'\n};\nexport const getMimeType = format => mapping[format] || null;","import { getMimeType } from './mime';\n\nconst getUploadXHR = ({\n  url,\n  upload,\n  type,\n  onResponse,\n  onError,\n  setProgress,\n  format\n}) => {\n  const xhr = new XMLHttpRequest();\n  const contentType = getMimeType(format);\n  xhr.withCredentials = true;\n  xhr.open('POST', url, true);\n  xhr.setRequestHeader('Content-Type', contentType);\n  xhr.setRequestHeader('Content-Disposition', 'attachment filename=\"' + upload.name + '\"');\n  xhr.onreadystatechange = onReadyStateChange({\n    xhr,\n    type,\n    onResponse,\n    onError\n  });\n  xhr.upload.onprogress = onProgress(setProgress);\n  return xhr;\n};\n\nconst onReadyStateChange = ({\n  xhr,\n  type,\n  onResponse,\n  onError\n}) => {\n  return e => {\n    const status = Math.floor(xhr.status / 100);\n\n    if (xhr.readyState === 4 && status === 2) {\n      const idAndMsg = extractIdAndMessage(xhr);\n      onResponse({ ...idAndMsg,\n        type: type\n      });\n    } else if (xhr.readyState === 4) {\n      onError(e);\n    }\n  };\n};\n\nconst extractIdAndMessage = xhr => {\n  const data = JSON.parse(xhr.responseText);\n  const {\n    message,\n    status,\n    typeReports,\n    response\n  } = data;\n\n  if (status && status === 'ERROR') {\n    if (Array.isArray(typeReports) && Array.isArray(typeReports[0].objectReports) && Array.isArray(typeReports[0].objectReports[0].errorReports)) {\n      return {\n        error: true,\n        msg: {\n          id: 'init',\n          text: typeReports[0].objectReports[0].errorReports[0].message,\n          date: new Date()\n        },\n        typeReports: data\n      };\n    }\n  }\n\n  if (typeof response !== 'undefined') {\n    return {\n      id: response.id,\n      msg: {\n        id: 'init',\n        text: message,\n        date: new Date(response.created)\n      }\n    };\n  }\n\n  return {\n    error: true\n  };\n};\n\nconst onProgress = setProgress => evt => {\n  if (evt.lengthComputable) {\n    const percentComplete = parseInt(evt.loaded / evt.total * 100);\n    setProgress(Math.max(1, percentComplete));\n  }\n};\n\nexport { getUploadXHR };","import i18n from '@dhis2/d2-i18n';\nimport { getUploadXHR } from './xhr';\n\nconst trimString = (length, string) => string.length > length ? string.substring(0, length - 3) + '...' : string;\n\nconst pathToId = path => {\n  const pathSplit = path.split('/');\n  const orgId = pathSplit[pathSplit.length - 1];\n  return orgId;\n};\n\nconst jsDateToISO8601 = date => `${date.getFullYear().toString()}-${(date.getMonth() + 1).toString().padStart(2, 0)}-${date.getDate().toString().padStart(2, 0)}`;\n\nconst jsDateToString = date => `${jsDateToISO8601(date)} ${date.getHours().toString().padStart(2, 0)}:${date.getMinutes().toString().padStart(2, 0)}:${date.getSeconds().toString().padStart(2, 0)}\n`;\n\nconst blobType = (format, compression) => {\n  if (compression === 'gzip') {\n    return `application/${format}+gzip`;\n  } else if (compression === 'zip') {\n    return `application/${format}+zip`;\n  }\n\n  if (format === 'xml') {\n    return 'application/xml';\n  } else if (format === 'json') {\n    return 'application/json';\n  }\n};\n\nconst createBlob = (contents, format, compression = 'none') => {\n  return URL.createObjectURL(new Blob([contents], {\n    type: blobType(format, compression)\n  }));\n};\n\nconst downloadBlob = (url, filename) => {\n  const link = document.createElement('a');\n  link.href = url;\n  link.setAttribute('download', filename);\n  document.body.appendChild(link);\n  link.click();\n  link.remove();\n};\n\nconst genericErrorMessage = i18n.t('An unknown error occurred. Please try again later');\n\nconst errorGenerator = setProgress => message => {\n  const timestamp = new Date().getTime();\n  setProgress(0);\n  return {\n    id: `xhr-${timestamp}`,\n    critical: true,\n    message: message ? message : genericErrorMessage\n  };\n};\n\nconst uploadFile = ({\n  url,\n  file,\n  format,\n  type,\n  setProgress,\n  addEntry\n}) => {\n  setProgress(1);\n  const errF = errorGenerator(setProgress);\n  return new Promise((resolve, reject) => {\n    try {\n      const xhr = getUploadXHR({\n        url,\n        upload: file,\n        type,\n        onResponse: ({\n          error,\n          id,\n          msg,\n          typeReports\n        }) => {\n          let entry;\n\n          if (error && msg) {\n            // error but we have a message\n            entry = {\n              id: new Date().getTime(),\n              level: 'ERROR',\n              created: new Date(),\n              lastUpdated: new Date(),\n              completed: true,\n              events: [msg],\n              summary: typeReports,\n              error: true,\n              importType: type\n            };\n          } else if (error) {\n            // error with no message\n            entry = {\n              id: new Date().getTime(),\n              level: 'ERROR',\n              created: new Date(),\n              lastUpdated: new Date(),\n              completed: true,\n              summary: undefined,\n              error: true,\n              importType: type\n            };\n          } else {\n            // success\n            entry = {\n              id: id,\n              level: 'INFO',\n              created: new Date(),\n              lastUpdated: new Date(),\n              completed: false,\n              events: [msg],\n              summary: undefined,\n              error: false,\n              importType: type\n            };\n          }\n\n          addEntry(entry.id, entry);\n\n          if (error) {\n            reject(errF(msg && msg.text));\n          }\n\n          setProgress(0);\n          resolve({});\n        },\n        onError: ev => {\n          let message;\n\n          try {\n            const response = JSON.parse(ev.target.response);\n            message = response.message;\n          } catch (e2) {\n            message = genericErrorMessage;\n          }\n\n          console.error('sendFile error', message);\n          reject(errF(message));\n        },\n        setProgress,\n        format\n      });\n      xhr.send(file);\n    } catch (e) {\n      // xhr.send can throw an exception\n      reject(errorGenerator(e));\n    }\n  });\n}; // call stub function if available\n\n\nconst locationAssign = url => {\n  if (window.locationAssign) {\n    window.locationAssign(url);\n  } else {\n    window.location = url;\n  }\n};\n\nconst getPrevJobDetails = (query, tasks) => {\n  if (!query || !query.id) return {};\n  const job = tasks[query.id];\n  if (!job) return {};\n  return job.jobDetails;\n};\n\nexport { createBlob, downloadBlob, getPrevJobDetails, locationAssign, jsDateToISO8601, jsDateToString, pathToId, trimString, uploadFile };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { InputField } from '@dhis2/ui-core';\nimport { jsDateToISO8601 } from '../../utils/helper';\nimport { FormField } from '../';\n\nconst DatePicker = ({\n  name,\n  error,\n  label,\n  date,\n  onChange,\n  dataTest,\n  required = true\n}) => {\n  const onChangeHelper = ({\n    value\n  }) => {\n    onChange(new Date(value));\n  };\n\n  const value = jsDateToISO8601(date);\n  return <FormField label={label} dataTest={dataTest}>\n            <InputField type=\"date\" name={name} value={value} onChange={onChangeHelper} required={required} inputWidth=\"200px\" error={!!error} validationText={error} />\n        </FormField>;\n};\n\nDatePicker.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  date: PropTypes.instanceOf(Date).isRequired,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  error: PropTypes.string,\n  required: PropTypes.bool\n};\nexport { DatePicker };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Field } from '@dhis2/ui-forms';\nimport { DatePicker } from '../';\n\nconst DATE_VALIDATOR = date => new Date(date) == 'Invalid Date' ? i18n.t('Invalid date') : undefined;\n\nconst DATE_BEFORE_VALIDATOR = (date1, date2) => date1 > date2 ? i18n.t('Start date must be before end date') : undefined;\n\nconst DATE_AFTER_VALIDATOR = (date2, date1) => date2 < date1 ? i18n.t('End date must be after start date') : undefined;\n\nconst Wrapper = ({\n  input: {\n    value,\n    onChange\n  },\n  meta: {\n    error\n  },\n  inputName,\n  ...rest\n}) => <DatePicker name={inputName} error={error} date={value} onChange={onChange} {...rest} />;\n\nWrapper.propTypes = {\n  input: PropTypes.shape({\n    value: PropTypes.instanceOf(Date).isRequired,\n    onChange: PropTypes.func\n  }).isRequired,\n  inputName: PropTypes.string.isRequired,\n  meta: PropTypes.shape({\n    error: PropTypes.string,\n    pristine: PropTypes.bool,\n    touched: PropTypes.bool\n  }).isRequired\n};\n\nconst DatePickerField = ({\n  name,\n  validator,\n  ...rest\n}) => {\n  return <Field component={Wrapper} name={name} validate={validator} inputName={name} type=\"date\" inputWidth=\"200px\" {...rest} />;\n};\n\nDatePickerField.propTypes = {\n  name: PropTypes.string.isRequired,\n  validator: PropTypes.func\n};\nexport { DatePickerField, DATE_VALIDATOR, DATE_BEFORE_VALIDATOR, DATE_AFTER_VALIDATOR };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SelectField } from '../';\nimport { eventIdSchemeOptions } from '../../utils/options';\n\nconst EventIdScheme = ({\n  name,\n  label,\n  dataTest\n}) => {\n  return <SelectField name={name} label={label} options={eventIdSchemeOptions} dense dataTest={dataTest} />;\n};\n\nEventIdScheme.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired\n};\nexport { EventIdScheme };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport PropTypes from 'prop-types';\nimport { Field, FileInput } from '@dhis2/ui-forms';\nimport { FormField } from '../';\n\nconst SINGLE_FILE_VALIDATOR = files => !files || files.length == 0 ? i18n.t('Please select a file') : undefined;\n\nconst FileUpload = ({\n  initialValue,\n  required,\n  name,\n  label,\n  accept = '*',\n  validator,\n  dataTest\n}) => {\n  return <FormField label={label} required={required} dataTest={dataTest}>\n            <Field component={FileInput} name={name} accept={accept} required={required} initialValue={initialValue} validate={validator} dataTest={`${dataTest}-fileinput`} />\n        </FormField>;\n};\n\nFileUpload.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  accept: PropTypes.string,\n  initialValue: PropTypes.instanceOf(File),\n  required: PropTypes.bool,\n  validator: PropTypes.func\n};\nexport { FileUpload, SINGLE_FILE_VALIDATOR };","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { AlertBar } from '@dhis2/ui-core';\nimport styles from './FormAlerts.module.css';\n\nconst FormAlerts = ({\n  alerts,\n  dataTest\n}) => {\n  const [bars, setBars] = useState([]);\n  useEffect(() => {\n    if (alerts) {\n      const newBars = alerts.map(a => <AlertBar key={`alert-${a.id}`} warning={a.warning} info={a.info} critical={a.critical} success={a.success} duration={8000}>\n                    {a.message}\n                </AlertBar>);\n      setBars(newBars);\n    }\n  }, [alerts]);\n  if (bars.length == 0) return null;\n  return <div className={styles.container} data-test={dataTest}>\n            {bars}\n        </div>;\n};\n\nFormAlerts.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  alerts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    message: PropTypes.string.isRequired,\n    critical: PropTypes.bool,\n    info: PropTypes.bool,\n    warning: PropTypes.bool\n  }))\n};\nexport { FormAlerts };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './FormField.module.css';\n\nconst FormField = ({\n  dataTest,\n  label,\n  required = false,\n  children\n}) => {\n  return <div className={styles.container} data-test={dataTest}>\n            <span className={styles.label}>\n                {label}\n                {required && <span> *</span>}\n            </span>\n            {children}\n        </div>;\n};\n\nFormField.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  children: PropTypes.node,\n  required: PropTypes.bool\n};\nexport { FormField };","import React from 'react';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { idSchemeOptions } from '../../utils/options';\nimport { SelectField } from '../';\nconst schemeQuery = {\n  org: {\n    resource: 'attributes',\n    params: {\n      filter: ['unique:eq:true', 'organisationUnitAttribute:eq:true'],\n      fields: ['id', 'displayName'],\n      paging: 'false'\n    }\n  },\n  data: {\n    resource: 'attributes',\n    params: {\n      filter: ['unique:eq:true', 'dataElementAttribute:eq:true'],\n      fields: ['id', 'displayName'],\n      paging: 'false'\n    }\n  }\n};\n\nconst attributeFoundIn = (attribute, collection) => !!collection.find(({\n  value\n}) => value === attribute.value);\n\nconst findSharedAttributes = (rawDataElementAttributes, rawOrganisationUnitAttributes) => {\n  const dataElementAttributes = rawDataElementAttributes.map(({\n    id,\n    displayName\n  }) => ({\n    value: `ATTRIBUTE:${id}`,\n    label: displayName\n  }));\n  const organisationUnitAttributes = rawOrganisationUnitAttributes.map(({\n    id,\n    displayName\n  }) => ({\n    value: `ATTRIBUTE:${id}`,\n    label: displayName\n  }));\n  const sharedAttributes = dataElementAttributes.reduce((shared, attribute) => {\n    const foundInOrgUnits = attributeFoundIn(attribute, organisationUnitAttributes);\n    return foundInOrgUnits ? [...shared, attribute] : shared;\n  }, []);\n  return sharedAttributes;\n};\n\nconst IdScheme = ({\n  name,\n  label,\n  dataTest\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(schemeQuery);\n  const validationText = error && `${i18n.t('Something went wrong when loading the additional ID schemes')} : ${error.message}`;\n  const schemes = data ? findSharedAttributes(data.data.attributes, data.org.attributes) : [];\n  const options = [...idSchemeOptions, ...schemes];\n  return <SelectField name={name} label={label} options={options} dataTest={dataTest} loading={loading} validationText={validationText} error={!!error} dense />;\n};\n\nIdScheme.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired\n};\nexport { IdScheme };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Button, ButtonStrip, Help } from '@dhis2/ui-core';\nimport styles from './ImportButtonStrip.module.css';\nconst DRYRUN_HELPTEXT = i18n.t('Will do a test run without importing any data into the database');\n\nconst ImportButtonStrip = ({\n  dryRunDataTest,\n  importDataTest,\n  form,\n  dataTest\n}) => {\n  return <div data-test={dataTest}>\n            <ButtonStrip dataTest={`${dataTest}-button-strip`}>\n                <Button primary type=\"submit\" onClick={() => form.change('dryRun', true)} dataTest={dryRunDataTest} className={styles.dryRun}>\n                    {i18n.t('Dry run')}\n                </Button>\n                <Button secondary type=\"submit\" onClick={() => form.change('dryRun', false)} dataTest={importDataTest}>\n                    {i18n.t('Import')}\n                </Button>\n            </ButtonStrip>\n            <Help dataTest={`${dataTest}-help`}>{`${i18n.t('Dry run')}: ${DRYRUN_HELPTEXT}`}</Help>\n        </div>;\n};\n\nImportButtonStrip.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  dryRunDataTest: PropTypes.string.isRequired,\n  form: PropTypes.object.isRequired,\n  importDataTest: PropTypes.string.isRequired\n};\nexport { ImportButtonStrip };","import { categoryTypes } from '../../utils/tasks';\nconst categoryTypesObj = categoryTypes.reduce((acc, cur) => {\n  acc[cur.importType] = cur;\n  return acc;\n}, {});\n\nconst jobToPath = job => ({\n  pathname: `/import/${categoryTypesObj[job.importType].key}`,\n  query: {\n    id: job.id\n  }\n});\n\nexport { categoryTypesObj, jobToPath };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport styles from './MenuLabel.module.css';\nimport { jsDateToString, trimString } from '../../../utils/helper';\n\nconst MenuLabel = ({\n  task\n}) => {\n  return <div className={styles.container} data-test={`job-overview-menu-label-${task.id}`}>\n            <div className={styles.status}>\n                <span>{trimString(15, task.jobDetails.files[0].name)}</span>\n                <br />\n                <span>\n                    {task.completed ? i18n.t('Completed') : i18n.t('In progress')}{' '}\n                </span>\n            </div>\n            <div className={styles.date}>{jsDateToString(task.created)}</div>\n        </div>;\n};\n\nMenuLabel.propTypes = {\n  task: PropTypes.shape({\n    completed: PropTypes.bool.isRequired,\n    created: PropTypes.instanceOf(Date).isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    jobDetails: PropTypes.object.isRequired\n  }).isRequired\n};\nexport { MenuLabel };","import React, { useContext, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Button, Chip, Menu, MenuItem } from '@dhis2/ui-core';\nimport styles from './JobOverview.module.css';\nimport { TaskContext } from '../../contexts/';\nimport { categoryTypes } from '../../utils/tasks';\nimport { JobSummary } from '../';\nimport { categoryTypesObj, jobToPath } from './helper';\nimport { MenuLabel } from './MenuLabel/MenuLabel';\n\nconst JobOverview = ({\n  activeTypes,\n  setActiveTypes,\n  selectedJob,\n  setSelectedJob\n}) => {\n  const {\n    tasks\n  } = useContext(TaskContext);\n\n  const onChipClick = key => {\n    if (activeTypes.includes(key)) {\n      setActiveTypes([...activeTypes].filter(k => k != key));\n    } else {\n      setActiveTypes([...activeTypes, key]);\n    }\n  }; // all tasks sorted by type, createdAt (descending)\n\n\n  const allTasks = categoryTypes.map(({\n    key: type\n  }) => Object.keys(tasks[type]).map(id => tasks[type][id])).flat().sort((a, b) => {\n    if (a.importType > b.importType) return -1;\n    if (a.createdAt > b.createdAt) return -1;\n  });\n  const filteredTasks = allTasks.filter(t => activeTypes.includes(t.importType)); // set selected job to first job if\n  // first time user visits the job overview page\n\n  useEffect(() => {\n    if (!selectedJob && allTasks.length > 0) {\n      setSelectedJob(allTasks[0]);\n    }\n  }, []);\n\n  if (!selectedJob) {\n    return <p>{i18n.t('No jobs started yet.')}</p>;\n  }\n\n  return <div className={styles.container} data-test=\"job-overview-container\">\n            <div className={styles.items} data-test=\"job-overview-tasks\">\n                <Menu className={styles.Menu}>\n                    <div className={styles.chips} data-test=\"job-overview-chips\">\n                        {categoryTypes.map(({\n            key,\n            importType,\n            label\n          }) => <Chip onClick={() => onChipClick(importType)} selected={activeTypes.includes(importType)} key={key} dataTest={`job-overview-chips-${key}`}>\n                                {label}\n                            </Chip>)}\n                    </div>\n                    {filteredTasks.map(t => <MenuItem key={`job-overview-tasks-${t.id}`} active={selectedJob.id == t.id} label={<MenuLabel task={t} />} onClick={() => setSelectedJob(t)} icon={categoryTypesObj[t.importType].icon} />)}\n                </Menu>\n            </div>\n            <div className={styles.summary} data-test=\"job-overview-summary\">\n                <JobSummary task={selectedJob} dataTest=\"job-summary-container\" showFileDetails={false} showJobDetails={true} />\n                <Link to={jobToPath(selectedJob)}>\n                    <Button primary>{i18n.t('Recreate job')}</Button>\n                </Link>\n            </div>\n        </div>;\n};\n\nJobOverview.propTypes = {\n  activeTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n  setActiveTypes: PropTypes.func.isRequired,\n  setSelectedJob: PropTypes.func.isRequired,\n  selectedJob: PropTypes.object\n};\nexport { JobOverview, categoryTypes };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableBody, TableCell, TableHead, TableRow, TableRowHead, TableCellHead } from '@dhis2/ui-core';\nimport { jsDateToString } from '../../../utils/helper';\nimport { FormField } from '../../';\n\nconst Events = ({\n  events\n}) => {\n  return <FormField label={`${i18n.t('Events')}`} dataTest=\"job-summary-events\" name=\"events\">\n            <Table>\n                <TableHead>\n                    <TableRowHead>\n                        <TableCellHead>{i18n.t('Time')}</TableCellHead>\n                        <TableCellHead>{i18n.t('Message')}</TableCellHead>\n                        <TableCellHead>{i18n.t('ID')}</TableCellHead>\n                    </TableRowHead>\n                </TableHead>\n                <TableBody>\n                    {events.map(e => <TableRow key={`job-summary-events-${e.id}`}>\n                            <TableCell>{jsDateToString(e.date)}</TableCell>\n                            <TableCell>{e.text}</TableCell>\n                            <TableCell>{e.id}</TableCell>\n                        </TableRow>)}\n                </TableBody>\n            </Table>\n        </FormField>;\n};\n\nconst eventPropType = PropTypes.shape({\n  date: PropTypes.instanceOf(Date).isRequired,\n  id: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired\n});\nEvents.propTypes = {\n  events: PropTypes.arrayOf(eventPropType).isRequired\n};\nexport { Events };","import PropTypes from 'prop-types';\nconst statsPropTypeObj = {\n  deleted: PropTypes.number.isRequired,\n  ignored: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  updated: PropTypes.number.isRequired,\n  imported: PropTypes.number,\n  created: PropTypes.number\n};\nconst statsPropType = PropTypes.exact(statsPropTypeObj);\n\nconst getClassName = c => {\n  const s = c.split('.');\n  return s[s.length - 1];\n};\n\nconst typeReportParse = report => {\n  let allStats = [];\n  const allMessages = [];\n  Object.keys(report).forEach(i => {\n    const {\n      klass,\n      objectReports,\n      stats\n    } = report[i];\n    allStats = [...allStats, { ...stats,\n      type: getClassName(klass)\n    }];\n    objectReports && objectReports.forEach(r => {\n      const {\n        uid,\n        errorReports\n      } = r;\n      errorReports && errorReports.forEach(e => {\n        allMessages.push({\n          uid,\n          type: getClassName(e.mainKlass),\n          property: e.errorProperty,\n          message: e.message\n        });\n      });\n    });\n  });\n  return {\n    stats: allStats,\n    messages: allMessages\n  };\n};\n\nconst messagesPropType = PropTypes.arrayOf(PropTypes.exact({\n  uid: PropTypes.string,\n  type: PropTypes.string,\n  property: PropTypes.string,\n  message: PropTypes.string\n}));\nexport { typeReportParse, statsPropType, statsPropTypeObj, messagesPropType };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableBody, TableCell, TableHead, TableRow, TableRowHead, TableCellHead } from '@dhis2/ui-core';\n\nconst SingleStatusTable = ({\n  status,\n  description\n}) => <Table>\n        <TableHead>\n            <TableRowHead>\n                <TableCellHead>{i18n.t('Status')}</TableCellHead>\n                <TableCellHead>{i18n.t('Description')}</TableCellHead>\n            </TableRowHead>\n        </TableHead>\n        <TableBody>\n            <TableRow>\n                <TableCell>{status}</TableCell>\n                <TableCell>{description}</TableCell>\n            </TableRow>\n        </TableBody>\n    </Table>;\n\nSingleStatusTable.propTypes = {\n  description: PropTypes.string,\n  status: PropTypes.string\n};\nexport { SingleStatusTable };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableBody, TableCell, TableHead, TableRow, TableRowHead, TableCellHead } from '@dhis2/ui-core';\nimport { statsPropType } from '../helper';\nimport { SingleStatusTable } from '../SingleStatusTable/SingleStatusTable';\nimport { FormField } from '../../';\n\nconst SingleSummary = ({\n  importCount,\n  status,\n  description,\n  conflicts,\n  id\n}) => <div>\n        <FormField label={`${i18n.t('Summary')} #${id}`} dataTest=\"job-summary-single-summary\" name=\"summary\">\n            <>\n                {status && <SingleStatusTable description={description} status={status} />}\n                <Table>\n                    <TableHead>\n                        <TableRowHead>\n                            <TableCellHead>{i18n.t('Created')}</TableCellHead>\n                            <TableCellHead>{i18n.t('Deleted')}</TableCellHead>\n                            <TableCellHead>{i18n.t('Ignored')}</TableCellHead>\n                            <TableCellHead>{i18n.t('Updated')}</TableCellHead>\n                            <TableCellHead>{i18n.t('Total')}</TableCellHead>\n                        </TableRowHead>\n                    </TableHead>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>{importCount.imported}</TableCell>\n                            <TableCell>{importCount.deleted}</TableCell>\n                            <TableCell>{importCount.ignored}</TableCell>\n                            <TableCell>{importCount.updated}</TableCell>\n                            <TableCell>{importCount.total}</TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </>\n        </FormField>\n        {conflicts && <FormField label={`${i18n.t('Conflicts')}`} dataTest=\"job-summary-conflicts\" name=\"conflicts\">\n                <Table>\n                    <TableHead>\n                        <TableRowHead>\n                            <TableCellHead>{i18n.t('Object')}</TableCellHead>\n                            <TableCellHead>{i18n.t('Value')}</TableCellHead>\n                        </TableRowHead>\n                    </TableHead>\n                    <TableBody>\n                        {conflicts.map((c, i) => <TableRow key={`job-summary-conflicts-${c.object}-${i}`}>\n                                <TableCell>{c.object}</TableCell>\n                                <TableCell>{c.value}</TableCell>\n                            </TableRow>)}\n                    </TableBody>\n                </Table>\n            </FormField>}\n    </div>;\n\nSingleSummary.propTypes = {\n  id: PropTypes.string.isRequired,\n  importCount: statsPropType.isRequired,\n  conflicts: PropTypes.arrayOf(PropTypes.exact({\n    object: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired\n  })),\n  description: PropTypes.string,\n  status: PropTypes.string\n};\nexport { SingleSummary };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableBody, TableCell, TableHead, TableRow, TableRowHead, TableCellHead } from '@dhis2/ui-core';\nimport { statsPropTypeObj } from '../helper';\nimport { FormField } from '../../';\n\nconst TypeCount = ({\n  stats\n}) => {\n  if (stats.length == 0) return null;\n  return <FormField label={`${i18n.t('Type count')}`} dataTest=\"job-summary-type-count\" name=\"typeCount\">\n            <Table>\n                <TableHead>\n                    <TableRowHead>\n                        <TableCellHead>{i18n.t('Type')}</TableCellHead>\n                        <TableCellHead>{i18n.t('Created')}</TableCellHead>\n                        <TableCellHead>{i18n.t('Deleted')}</TableCellHead>\n                        <TableCellHead>{i18n.t('Ignored')}</TableCellHead>\n                        <TableCellHead>{i18n.t('Updated')}</TableCellHead>\n                        <TableCellHead>{i18n.t('Total')}</TableCellHead>\n                    </TableRowHead>\n                </TableHead>\n                <TableBody>\n                    {stats.map((s, i) => <TableRow key={`job-summary-type-count-${i}`}>\n                            <TableCell>{s.type}</TableCell>\n                            <TableCell>{s.created}</TableCell>\n                            <TableCell>{s.deleted}</TableCell>\n                            <TableCell>{s.ignored}</TableCell>\n                            <TableCell>{s.updated}</TableCell>\n                            <TableCell>{s.total}</TableCell>\n                        </TableRow>)}\n                </TableBody>\n            </Table>\n        </FormField>;\n};\n\nconst typeCountStatsPropTypeObj = { ...statsPropTypeObj,\n  type: PropTypes.string.isRequired\n};\nTypeCount.propTypes = {\n  stats: PropTypes.arrayOf(PropTypes.shape(typeCountStatsPropTypeObj)).isRequired\n};\nexport { TypeCount, typeCountStatsPropTypeObj };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableBody, TableCell, TableHead, TableRow, TableRowHead, TableCellHead } from '@dhis2/ui-core';\nimport { FormField } from '../../';\nimport { messagesPropType } from '../helper';\n\nconst Messages = ({\n  messages\n}) => {\n  if (messages.length == 0) return null;\n  return <FormField label={`${i18n.t('Messages')}`} dataTest=\"job-summary-messages\" name=\"messages\">\n            <Table>\n                <TableHead>\n                    <TableRowHead>\n                        <TableCellHead>{i18n.t('UID')}</TableCellHead>\n                        <TableCellHead>{i18n.t('Type')}</TableCellHead>\n                        <TableCellHead>{i18n.t('Property')}</TableCellHead>\n                        <TableCellHead>{i18n.t('Message')}</TableCellHead>\n                    </TableRowHead>\n                </TableHead>\n                <TableBody>\n                    {messages.map((m, i) => <TableRow key={`job-summary-messages-${i}`}>\n                            <TableCell>{m.uid}</TableCell>\n                            <TableCell>{m.type}</TableCell>\n                            <TableCell>{m.property}</TableCell>\n                            <TableCell>{m.message}</TableCell>\n                        </TableRow>)}\n                </TableBody>\n            </Table>\n        </FormField>;\n};\n\nMessages.propTypes = {\n  messages: messagesPropType.isRequired\n};\nexport { Messages, messagesPropType };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { statsPropType, messagesPropType } from '../helper';\nimport { SingleSummary } from '../SingleSummary/SingleSummary';\nimport { TypeCount, typeCountStatsPropTypeObj } from '../TypeCount/TypeCount';\nimport { Messages } from '../Messages/Messages';\n\nconst TypeReportSummary = ({\n  overviewStats,\n  stats,\n  messages\n}) => {\n  return <div>\n            <SingleSummary importCount={overviewStats} id={i18n.t('Overview')} />\n            <TypeCount stats={stats} />\n            <Messages messages={messages} />\n        </div>;\n};\n\nTypeReportSummary.propTypes = {\n  messages: messagesPropType.isRequired,\n  overviewStats: statsPropType.isRequired,\n  stats: PropTypes.arrayOf(PropTypes.exact(typeCountStatsPropTypeObj)).isRequired\n};\nexport { TypeReportSummary };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { typeReportParse } from '../helper';\nimport { SingleSummary } from '../SingleSummary/SingleSummary';\nimport { TypeReportSummary } from '../TypeReportSummary/TypeReportSummary';\n\nconst extractStats = summary => {\n  if (summary.responseType == 'ImportSummaries') {\n    const {\n      imported,\n      deleted,\n      ignored,\n      updated,\n      total\n    } = summary;\n    return {\n      imported,\n      deleted,\n      ignored,\n      updated,\n      total\n    };\n  } else if (summary.importCount) {\n    const {\n      imported,\n      deleted,\n      ignored,\n      updated\n    } = summary.importCount;\n    const total = imported + deleted + ignored + updated;\n    return {\n      imported,\n      deleted,\n      ignored,\n      updated,\n      total\n    };\n  } else if (summary.stats) {\n    const {\n      imported,\n      deleted,\n      ignored,\n      updated,\n      total\n    } = summary.stats;\n    return {\n      imported,\n      deleted,\n      ignored,\n      updated,\n      total\n    };\n  }\n};\n\nconst Summary = ({\n  summary\n}) => {\n  // gml import type object return\n  if (summary.typeReports) {\n    const overviewStats = { ...summary.stats,\n      imported: summary.stats.created\n    };\n    const {\n      stats,\n      messages\n    } = typeReportParse(summary.typeReports);\n    return <div data-test=\"job-summary-summary\">\n                <TypeReportSummary overviewStats={overviewStats} stats={stats} messages={messages} />\n            </div>;\n  }\n\n  const importCount = extractStats(summary);\n  const overviewSummary = <SingleSummary importCount={importCount} status={summary.status} description={summary.description} conflicts={summary.conflicts} id={i18n.t('Overview')} />;\n  const allSummaries = summary.responseType == 'ImportSummaries' && summary.importSummaries ? summary.importSummaries.map((s, i) => {\n    const importCount = extractStats(s);\n    return <SingleSummary key={`single-summary-${i}`} importCount={importCount} status={s.status} description={s.description} conflicts={s.conflicts} id={`${i + 1}`} />;\n  }) : null;\n  return <div data-test=\"job-summary-summary\">\n            {overviewSummary}\n            {allSummaries}\n        </div>;\n};\n\nSummary.propTypes = {\n  summary: PropTypes.object.isRequired\n};\nexport { Summary };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Table, TableBody, TableCell, TableHead, TableRow, TableRowHead, TableCellHead } from '@dhis2/ui-core';\nimport { FormField } from '../../';\n\nconst valueToString = value => {\n  if (value instanceof File) {\n    return value.name;\n  } else if (Array.isArray(value)) {\n    return value.map(v => valueToString(v)).join(',');\n  } else if (value instanceof Object) {\n    return value.label;\n  }\n\n  return `${value}`;\n};\n\nconst Details = ({\n  details\n}) => {\n  return <FormField label={`${i18n.t('Job details')}`} dataTest=\"job-summary-job-details\" name=\"details\">\n            <Table>\n                <TableHead>\n                    <TableRowHead>\n                        <TableCellHead>{i18n.t('Key')}</TableCellHead>\n                        <TableCellHead>{i18n.t('Value')}</TableCellHead>\n                    </TableRowHead>\n                </TableHead>\n                <TableBody>\n                    {Object.keys(details).map(key => <TableRow key={`job-summary-job-details-${key}`}>\n                            <TableCell>{key}</TableCell>\n                            <TableCell>{valueToString(details[key])}</TableCell>\n                        </TableRow>)}\n                </TableBody>\n            </Table>\n        </FormField>;\n};\n\nDetails.propTypes = {\n  details: PropTypes.object.isRequired\n};\nexport { Details };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Divider, Tag } from '@dhis2/ui-core';\nimport styles from './JobSummary.module.css';\nimport { jsDateToString } from '../../utils/helper';\nimport { Events } from './Events/Events';\nimport { Summary } from './Summary/Summary';\nimport { Details } from './Details/Details';\n\nconst Header = ({\n  jobDetails,\n  task,\n  showFileDetails\n}) => <div className={styles.header}>\n        <h3 className={styles.title}>{`${i18n.t('Job summary')}`}</h3>\n        {showFileDetails && <span className={styles.taskDetails}>\n                <span data-test=\"job-summary-filename\">\n                    {jobDetails.files[0].name}\n                </span>{' '}\n                -{' '}\n                <span data-test=\"job-summary-date\">\n                    {jsDateToString(task.created)}{' '}\n                </span>\n            </span>}\n    </div>;\n\nHeader.propTypes = {\n  jobDetails: PropTypes.object.isRequired,\n  task: PropTypes.object.isRequired,\n  showFileDetails: PropTypes.bool\n};\n\nconst Tags = ({\n  jobDetails,\n  task\n}) => <div className={styles.tags} data-test=\"job-summary-tags\">\n        {task.completed ? <Tag positive>{i18n.t('Completed')}</Tag> : <Tag neutral>{i18n.t('In progress')}</Tag>}\n        {task.error && <Tag negative bold>\n                {i18n.t('Error')}\n            </Tag>}\n        {task.summary && task.summary.conflicts && <Tag negative>{i18n.t('Conflicts')}</Tag>}\n        {jobDetails.dryRun && <Tag neutral bold>\n                {i18n.t('Dry run')}\n            </Tag>}\n    </div>;\n\nTags.propTypes = {\n  jobDetails: PropTypes.object.isRequired,\n  task: PropTypes.object.isRequired\n};\n\nconst JobSummary = ({\n  task,\n  showFileDetails = true,\n  showJobDetails = false,\n  dataTest\n}) => {\n  if (!task) return null;\n  const {\n    jobDetails\n  } = task;\n  return <div className={styles.container} data-test={dataTest}>\n            <Header jobDetails={jobDetails} task={task} showFileDetails={showFileDetails} />\n            <Tags jobDetails={jobDetails} task={task} />\n            <Divider />\n            {task.completed && task.summary && <Summary summary={task.summary} />}\n            <div className={styles.events}>\n                <Events events={task.events} />\n            </div>\n            {showJobDetails && <div className={styles.jobDetails}>\n                    <Details details={task.jobDetails} />\n                </div>}\n        </div>;\n};\n\nJobSummary.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  showFileDetails: PropTypes.bool,\n  showJobDetails: PropTypes.bool,\n  task: PropTypes.object\n};\nexport { JobSummary };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { JobSummary } from '../JobSummary';\nimport { MoreOptions } from '../../';\n\nconst MiniJobSummary = ({\n  task,\n  dataTest\n}) => {\n  if (!task) return null;\n  return <div data-test={dataTest}>\n            <MoreOptions label={i18n.t('View summary of recently started import job')} dataTest={`${dataTest}-MoreOptions`}>\n                <JobSummary task={task} dataTest={`${dataTest}-JobSummary`} />\n            </MoreOptions>\n        </div>;\n};\n\nMiniJobSummary.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  task: PropTypes.object\n};\nexport { MiniJobSummary };","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { MinusIcon, PlusIcon } from '../';\nimport styles from './MoreOptions.module.css';\n\nconst MoreOptions = ({\n  children,\n  initiallyVisible = false,\n  label = i18n.t('more options'),\n  dataTest = 'interaction-more-options'\n}) => {\n  const [hidden, setHidden] = useState(!initiallyVisible);\n\n  const onToggle = () => {\n    setHidden(!hidden);\n  };\n\n  return <div className={styles.container} data-test={dataTest}>\n            <div className={styles.header} onClick={onToggle} data-test={`${dataTest}-header`}>\n                {hidden ? <PlusIcon /> : <MinusIcon />}\n                {label}\n            </div>\n            <div className={styles.children} data-test={`${dataTest}-children`}>\n                {!hidden && children}\n            </div>\n        </div>;\n};\n\nMoreOptions.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n  dataTest: PropTypes.string,\n  initiallyVisible: PropTypes.bool,\n  label: PropTypes.string\n};\nexport { MoreOptions };","import React from 'react';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { orgUnitIdSchemeOptions } from '../../utils/options';\nimport { SelectField } from '../';\nconst schemeQuery = {\n  data: {\n    resource: 'attributes',\n    params: {\n      filter: ['unique:eq:true', 'organisationUnitAttribute:eq:true'],\n      fields: ['id', 'displayName'],\n      paging: 'false'\n    }\n  }\n};\n\nconst OrgUnitIdScheme = ({\n  name,\n  label,\n  dataTest\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(schemeQuery);\n  const validationText = error && `${i18n.t('Something went wrong when loading the additional organisation unit ID schemes')} : ${error.message}`;\n  const schemes = data ? data.data.attributes.map(({\n    id,\n    displayName\n  }) => ({\n    value: `ATTRIBUTE:${id}`,\n    label: displayName\n  })) : [];\n  const options = [...orgUnitIdSchemeOptions, ...schemes];\n  return <SelectField name={name} label={label} options={options} dataTest={dataTest} loading={loading} validationText={validationText} error={!!error} dense />;\n};\n\nOrgUnitIdScheme.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired\n};\nexport { OrgUnitIdScheme };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Radio, Checkbox, Node } from '@dhis2/ui-core';\n\nconst Tree = ({\n  list,\n  select,\n  selected,\n  multiSelect,\n  onOpen,\n  onClose,\n  dataTest\n}) => {\n  const view = () => node(list);\n\n  const node = (l, d = 0) => {\n    if (!Array.isArray(list)) {\n      return null;\n    }\n\n    return l.map(({\n      open,\n      label,\n      value,\n      children,\n      hasChildren\n    }) => {\n      const component = multiSelect ? <Checkbox name={value} value={value} label={label} checked={selected.includes(value)} onChange={() => select(value)} dataTest={`${dataTest}-${value}-select`} /> : <Radio name={value} value={value} label={label} checked={selected.includes(value)} onChange={() => select(value)} dataTest={`${dataTest}-${value}-select`} />;\n      return <Node key={`node-${value}`} open={open} label={label} component={component} value={value} onOpen={() => onOpen(value, children)} onClose={() => onClose(value, children)} dataTest={`${dataTest}-${value}`}>\n                    {hasChildren && children.length == 0 ? <span>placeholder</span> : null}\n                    {children ? node(children, d + 1) : null}\n                </Node>;\n    });\n  };\n\n  return list.length == 0 ? null : <div data-test={dataTest}>{view()}</div>;\n};\n\nconst listItemPropType = PropTypes.exact({\n  children: PropTypes.array.isRequired,\n  hasChildren: PropTypes.bool.isRequired,\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  value: PropTypes.string.isRequired\n}); //   80:5  error  Callback prop types must be listed after all other prop types  react/sort-prop-types\n\nTree.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  list: PropTypes.arrayOf(listItemPropType).isRequired,\n  selected: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onClose: PropTypes.func.isRequired,\n  // eslint-disable-next-line react/sort-prop-types\n  onOpen: PropTypes.func.isRequired,\n  select: PropTypes.func.isRequired,\n  multiSelect: PropTypes.bool\n};\nexport { Tree };","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { CircularLoader, Help } from '@dhis2/ui-core';\nimport { pathToId } from '../../utils/helper';\nimport { FormField } from '../';\nimport { Tree } from './Tree/Tree';\nimport styles from './OrgUnitTree.module.css';\nconst rootQuery = {\n  roots: {\n    resource: 'organisationUnits',\n    params: {\n      filter: 'level:eq:1',\n      fields: 'id,path,displayName,children::isNotEmpty',\n      paging: 'false'\n    }\n  }\n};\nconst orgQuery = {\n  units: {\n    resource: 'organisationUnits',\n    id: ({\n      id\n    }) => `${id}`,\n    params: {\n      fields: 'children[id,displayName,path,children::isNotEmpty]',\n      paging: 'false'\n    }\n  }\n};\n\nconst OrgUnitTree = ({\n  label,\n  selected,\n  setSelected,\n  meta,\n  dataTest,\n  multiSelect = true\n}) => {\n  const [children, setChildren] = useState([]);\n  const [error, setError] = useState(undefined);\n  const {\n    loading,\n    engine\n  } = useDataQuery(rootQuery, {\n    onComplete: data => {\n      const roots = data.roots.organisationUnits;\n      const list = formatList(roots);\n      setChildren(list);\n    },\n    onError: error => {\n      setError(error);\n      console.error('OrgUnitTree error: ', error);\n    }\n  });\n\n  const formatList = list => {\n    return list.map(({\n      id,\n      path,\n      displayName,\n      children\n    }) => ({\n      open: false,\n      id: id,\n      value: path,\n      label: displayName,\n      children: [],\n      hasChildren: children\n    }));\n  };\n\n  const toggleOpenStatus = path => {\n    const hierarchy = path.split('/').filter(p => p.length != 0);\n    const newChildren = [...children];\n    let target = newChildren;\n    hierarchy.forEach(parent => {\n      target = target.find(el => el.id == parent);\n\n      if (target.value == path) {\n        target.open = !target.open;\n      } else {\n        target = target.children;\n      }\n    });\n    setChildren(newChildren);\n  };\n\n  const setChildrenFor = (path, ch) => {\n    const list = formatList(ch);\n    list.sort((a, b) => a.label.localeCompare(b.label));\n    const hierarchy = path.split('/').filter(p => p.length != 0);\n    const newChildren = [...children];\n    let target = newChildren;\n    hierarchy.forEach(parent => {\n      target = target.find(el => el.id == parent);\n\n      if (target.value == path) {\n        target.children = list;\n        target.open = true;\n      } else {\n        target = target.children;\n      }\n    });\n    setChildren(newChildren);\n  };\n\n  const onOpen = (path, ch) => {\n    if (ch.length == 0) {\n      const orgId = pathToId(path);\n      engine.query(orgQuery, {\n        variables: {\n          id: orgId\n        },\n        onComplete: data => {\n          setChildrenFor(path, data.units.children);\n        },\n        onError: error => {\n          setError(error);\n          console.error('OrgUnitTree onOpen error: ', error);\n        }\n      });\n    } else {\n      toggleOpenStatus(path);\n    }\n  };\n\n  const onClose = path => {\n    toggleOpenStatus(path);\n  };\n\n  const onSelect = path => {\n    if (multiSelect) {\n      const newValue = !selected.includes(path);\n\n      if (newValue == false) {\n        setSelected(selected.filter(p => p != path));\n      } else {\n        setSelected([...selected, path]);\n      }\n    } else {\n      setSelected([path]);\n    }\n  };\n\n  const showTree = !loading && !error;\n  return <FormField label={label} dataTest={dataTest}>\n            <div className={styles.container}>\n                {loading && <CircularLoader dataTest={`${dataTest}-loading`} />}\n                {error && <div data-test={`${dataTest}-error`}>\n                        <p>\n                            {i18n.t('Something went wrong when loading the organisation units!')}\n                        </p>\n                        <p>{error.message}</p>\n                    </div>}\n                {showTree && <Tree selected={selected} select={onSelect} multiSelect={multiSelect} onOpen={onOpen} onClose={onClose} list={children} dataTest={`${dataTest}-tree`} />}\n                {(meta.touched || !meta.pristine) && meta.error && <Help error>{meta.error}</Help>}\n            </div>\n        </FormField>;\n};\n\nOrgUnitTree.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  meta: PropTypes.object.isRequired,\n  selected: PropTypes.arrayOf(PropTypes.string).isRequired,\n  setSelected: PropTypes.func.isRequired,\n  multiSelect: PropTypes.bool\n};\nexport { OrgUnitTree };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Field } from '@dhis2/ui-forms';\nimport { OrgUnitTree } from './OrgUnitTree';\n\nconst SINGLE_ORG_VALIDATOR = selectedOrgUnits => selectedOrgUnits.length == 0 ? i18n.t('At least one organisation unit must be selected') : undefined;\n\nconst SINGLE_EXACT_ORG_VALIDATOR = selectedOrgUnits => selectedOrgUnits.length != 1 ? i18n.t('One organisation unit must be selected') : undefined;\n\nconst Wrapper = ({\n  input: {\n    value,\n    onChange\n  },\n  meta,\n  ...rest\n}) => <OrgUnitTree meta={meta} selected={value} setSelected={onChange} {...rest} />;\n\nWrapper.propTypes = {\n  input: PropTypes.shape({\n    value: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onChange: PropTypes.func\n  }).isRequired,\n  meta: PropTypes.shape({\n    error: PropTypes.string,\n    pristine: PropTypes.bool,\n    touched: PropTypes.bool\n  }).isRequired\n};\n\nconst OrgUnitTreeField = ({\n  name,\n  validator,\n  ...rest\n}) => {\n  return <Field component={Wrapper} name={name} validate={validator} {...rest} />;\n};\n\nOrgUnitTreeField.propTypes = {\n  name: PropTypes.string.isRequired,\n  validator: PropTypes.func\n};\nexport { OrgUnitTreeField, SINGLE_ORG_VALIDATOR, SINGLE_EXACT_ORG_VALIDATOR };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CircularLoader, ComponentCover, LinearLoader } from '@dhis2/ui-core';\nimport styles from './Page.module.css';\nimport { JobSummary, MiniJobSummary } from '../../components/';\n\nconst Page = ({\n  title,\n  desc,\n  icon,\n  summaryTask,\n  showFullSummaryTask = false,\n  children,\n  loading = false,\n  dataTest\n}) => {\n  const loadingEl = typeof loading == 'number' ? <LinearLoader amount={loading} /> : <CircularLoader />;\n  return <div className={styles.container} data-test={dataTest}>\n            <div className={styles.header}>\n                <span className={styles.icon}>{icon}</span>\n                <span className={styles.title}>{title}</span>\n                <p className={styles.desc}>{desc}</p>\n            </div>\n            {summaryTask && <Card className={styles.preBody}>\n                    <div className={styles.content}>\n                        {showFullSummaryTask ? <JobSummary task={summaryTask} dataTest=\"job-summary-container\" /> : <MiniJobSummary task={summaryTask} dataTest=\"mini-job-summary-container\" />}\n                    </div>\n                </Card>}\n            <Card>\n                {!!loading && <ComponentCover>{loadingEl}</ComponentCover>}\n                <div className={styles.content}>{children}</div>\n            </Card>\n        </div>;\n};\n\nPage.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n  dataTest: PropTypes.string.isRequired,\n  desc: PropTypes.string.isRequired,\n  icon: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  loading: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  showFullSummaryTask: PropTypes.bool,\n  summaryTask: PropTypes.object\n};\nexport { Page };","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport i18n from '@dhis2/d2-i18n';\nimport { CircularLoader, Help } from '@dhis2/ui-core';\nimport { FormField, SelectableList } from '../';\nconst programQuery = {\n  programs: {\n    resource: 'programs',\n    params: {\n      fields: 'id,displayName',\n      paging: 'false'\n    }\n  }\n};\n\nconst ProgramPicker = ({\n  label,\n  selected,\n  setSelected,\n  meta,\n  dataTest,\n  multiSelect,\n  withFilter,\n  withActions,\n  autoSelectFirst\n}) => {\n  const [list, setList] = useState([]);\n  const {\n    error,\n    loading\n  } = useDataQuery(programQuery, {\n    onComplete: data => {\n      const programs = data.programs.programs;\n      const list = programs.map(({\n        id,\n        displayName\n      }) => ({\n        value: id,\n        label: displayName\n      }));\n      setList(list);\n\n      if (autoSelectFirst) {\n        setSelected([list[0].value]);\n      }\n    },\n    onError: error => {\n      console.error('ProgramPicker error: ', error);\n    }\n  });\n  const showList = !loading && !error;\n  return <FormField label={label} dataTest={dataTest}>\n            {loading && <CircularLoader dataTest={`${dataTest}-loading`} />}\n            {error && <div data-test={`${dataTest}-error`}>\n                    <p>\n                        {i18n.t('Something went wrong when loading the programs!')}\n                    </p>\n                    <p>{error.message}</p>\n                </div>}\n            {showList && <SelectableList name=\"programPicker\" label={i18n.t('Filter programs by name')} selected={selected} setSelected={setSelected} multiSelect={multiSelect} list={list} withFilter={withFilter} withActions={withActions} dataTest={`${dataTest}-list`} />}\n            {(meta.touched || !meta.pristine) && meta.error && <Help error>{meta.error}</Help>}\n        </FormField>;\n};\n\nProgramPicker.defaultProps = {\n  multiSelect: false,\n  withFilter: true,\n  withActions: false,\n  autoSelectFirst: true\n};\nProgramPicker.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  meta: PropTypes.object.isRequired,\n  selected: PropTypes.arrayOf(PropTypes.string).isRequired,\n  setSelected: PropTypes.func.isRequired,\n  autoSelectFirst: PropTypes.bool,\n  multiSelect: PropTypes.bool,\n  withActions: PropTypes.bool,\n  withFilter: PropTypes.bool\n};\nexport { ProgramPicker };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Field } from '@dhis2/ui-forms';\nimport { ProgramPicker } from '../';\n\nconst SINGLE_PROGRAM_VALIDATOR = selectedPrograms => selectedPrograms.length == 0 ? i18n.t('At least one program must be selected') : undefined;\n\nconst SINGLE_EXACT_PROGRAM_VALIDATOR = selectedPrograms => selectedPrograms.length != 1 ? i18n.t('One program must be selected') : undefined;\n\nconst Wrapper = ({\n  input: {\n    value,\n    onChange\n  },\n  meta,\n  ...rest\n}) => <ProgramPicker meta={meta} selected={value} setSelected={onChange} {...rest} />;\n\nWrapper.propTypes = {\n  input: PropTypes.shape({\n    value: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onChange: PropTypes.func\n  }).isRequired,\n  meta: PropTypes.shape({\n    error: PropTypes.string,\n    pristine: PropTypes.bool,\n    touched: PropTypes.bool\n  }).isRequired\n};\n\nconst ProgramPickerField = ({\n  name,\n  ...rest\n}) => {\n  return <Field component={Wrapper} name={name} {...rest} />;\n};\n\nProgramPickerField.propTypes = {\n  name: PropTypes.string.isRequired\n};\nexport { ProgramPickerField, SINGLE_PROGRAM_VALIDATOR, SINGLE_EXACT_PROGRAM_VALIDATOR };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { SelectField } from '../';\nimport { useProgramStages } from '../../hooks/';\n\nconst SINGLE_EXACT_PROGRAMSTAGE_VALIDATOR = programStage => !programStage ? i18n.t('One program stage must be selected') : undefined;\n\nconst ProgramStages = ({\n  name,\n  label,\n  selectedPrograms,\n  form,\n  validator,\n  dataTest\n}) => {\n  const setProgramStage = val => form.change(name, val);\n\n  const program = selectedPrograms.length > 0 ? selectedPrograms[0] : undefined;\n  const {\n    loading: programStagesLoading,\n    error: programStagesError,\n    validationText: programStagesValidationText,\n    programStages\n  } = useProgramStages(program, setProgramStage);\n  return <SelectField name={name} loading={programStagesLoading} label={label} validate={validator} dataTest={dataTest} options={programStages} validationText={programStagesValidationText} error={!!programStagesError} dense />;\n};\n\nProgramStages.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  form: PropTypes.object.isRequired,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  selectedPrograms: PropTypes.array.isRequired,\n  validator: PropTypes.func\n};\nexport { ProgramStages, SINGLE_EXACT_PROGRAMSTAGE_VALIDATOR };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Help, Radio } from '@dhis2/ui-core';\nimport { optionPropType, optionsPropType } from '../../utils/options';\nimport { FormField } from '../';\nimport styles from './RadioGroup.module.css';\n\nconst RadioGroup = ({\n  name,\n  label,\n  options,\n  checked,\n  setValue,\n  dataTest\n}) => {\n  const onChange = label => ({\n    value\n  }) => setValue({\n    value: value,\n    label: label\n  });\n\n  return <FormField label={label} dataTest={dataTest} name={name}>\n            <div className={styles.inputs}>\n                {options.map(o => <div key={o.value}>\n                        <Radio className={styles.radio} name={name} value={o.value} label={o.label} checked={o.value == checked.value} onChange={onChange(o.label)} dataTest={`${dataTest}-${o.value}`} />\n                        {o.help && <Help>{o.help}</Help>}\n                    </div>)}\n            </div>\n        </FormField>;\n};\n\nRadioGroup.propTypes = {\n  checked: optionPropType.isRequired,\n  dataTest: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  options: optionsPropType.isRequired,\n  setValue: PropTypes.func.isRequired\n};\nexport { RadioGroup };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field } from '@dhis2/ui-forms';\nimport { RadioGroup } from './RadioGroup';\nimport { optionPropType } from '../../utils/options';\n\nconst Wrapper = ({\n  input: {\n    value,\n    onChange\n  },\n  meta: {\n    error\n  },\n  inputName,\n  ...rest\n}) => <RadioGroup name={inputName} error={error} checked={value} setValue={onChange} {...rest} />;\n\nWrapper.propTypes = {\n  input: PropTypes.shape({\n    value: optionPropType.isRequired,\n    onChange: PropTypes.func\n  }).isRequired,\n  inputName: PropTypes.string.isRequired,\n  meta: PropTypes.shape({\n    error: PropTypes.string,\n    pristine: PropTypes.bool,\n    touched: PropTypes.bool\n  }).isRequired\n};\n\nconst RadioGroupField = ({\n  name,\n  ...rest\n}) => {\n  return <Field component={Wrapper} name={name} inputName={name} {...rest} />;\n};\n\nRadioGroupField.propTypes = {\n  name: PropTypes.string.isRequired\n};\nexport { RadioGroupField };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { FileUpload as FileUploadGeneric } from '../';\nimport { SINGLE_FILE_VALIDATOR } from '../FileUpload/FileUpload';\nconst NAME = 'files';\nconst LABEL = i18n.t('File');\nconst DATATEST = 'input-file-upload';\nconst VALIDATOR = SINGLE_FILE_VALIDATOR;\n\nconst FileUpload = () => <FileUploadGeneric name={NAME} label={LABEL} validator={VALIDATOR} dataTest={DATATEST} />;\n\nexport { FileUpload };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ImportButtonStrip as ImportButtonStripGeneric } from '../';\nconst DRYRUNDATATEST = 'input-dry-run';\nconst IMPORTDATATEST = 'input-import-submit';\nconst DATATEST = 'input-import-button-strip';\n\nconst ImportButtonStrip = ({\n  form\n}) => <ImportButtonStripGeneric form={form} dryRunDataTest={DRYRUNDATATEST} importDataTest={IMPORTDATATEST} dataTest={DATATEST} />;\n\nImportButtonStrip.propTypes = {\n  form: PropTypes.object.isRequired\n};\nexport { ImportButtonStrip };","import React from 'react';\nimport { FormAlerts as FormAlertsGeneric } from '../';\nconst DATATEST = 'input-form-alerts';\n\nconst FormAlerts = ({\n  alerts\n}) => <FormAlertsGeneric alerts={alerts} dataTest={DATATEST} />;\n\nFormAlerts.propTypes = {\n  alerts: FormAlertsGeneric.propTypes.alerts\n};\nexport { FormAlerts };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { RadioGroupField } from '../';\nimport { optionsPropType } from '../../utils/options';\nconst NAME = 'format';\nconst DATATEST = 'input-format';\nconst LABEL = i18n.t('Format');\n\nconst Format = ({\n  availableFormats\n}) => <RadioGroupField name={NAME} label={LABEL} options={availableFormats} dataTest={DATATEST} />;\n\nFormat.propTypes = {\n  availableFormats: optionsPropType.isRequired\n};\nexport { Format };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Switch } from '../';\nconst NAME = 'firstRowIsHeader';\nconst DATATEST = 'input-first-row-is-header';\nconst LABEL = i18n.t('First row is header');\n\nconst FirstRowIsHeader = ({\n  show,\n  value\n}) => show && <Switch name={NAME} label={LABEL} value={value} dataTest={DATATEST} />;\n\nFirstRowIsHeader.propTypes = {\n  show: PropTypes.bool.isRequired,\n  value: PropTypes.bool.isRequired\n};\nexport { FirstRowIsHeader };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { SelectField } from '../';\nimport { useClassKeys } from '../../hooks/';\nconst NAME = 'classKey';\nconst LABEL = i18n.t('Object');\nconst DATATEST = 'input-class-key';\n\nconst ClassKey = ({\n  form,\n  prevValue,\n  show = true\n}) => {\n  const setClassKey = val => form.change(NAME, val);\n\n  const {\n    loading: classKeysLoading,\n    error: classKeysError,\n    validationText: classKeysValidationText,\n    classKeys\n  } = useClassKeys(setClassKey, prevValue);\n  return show && <SelectField name={NAME} label={LABEL} options={classKeys} loading={classKeysLoading} dataTest={DATATEST} validationText={classKeysValidationText} error={!!classKeysError} filterable dense />;\n};\n\nClassKey.propTypes = {\n  form: PropTypes.object.isRequired,\n  prevValue: PropTypes.object,\n  show: PropTypes.bool\n};\nexport { ClassKey };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { strategyOptions } from '../../utils/options';\nimport { RadioGroupField } from '../';\nconst NAME = 'strategy';\nconst DATATEST = 'input-strategy';\nconst LABEL = i18n.t('Strategy');\n\nconst Strategy = () => <RadioGroupField name={NAME} label={LABEL} options={strategyOptions} dataTest={DATATEST} />;\n\nexport { Strategy };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Switch } from '../';\nconst NAME = 'preheatCache';\nconst DATATEST = 'input-preheat-cache';\nconst LABEL = i18n.t('Preheat cache');\nconst HELPTEXT = i18n.t('Faster for large imports');\n\nconst PreheatCache = ({\n  value\n}) => <Switch name={NAME} label={LABEL} value={value} dataTest={DATATEST} help={HELPTEXT} />;\n\nPreheatCache.propTypes = {\n  value: PropTypes.bool.isRequired\n};\nexport { PreheatCache };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Switch } from '../';\nconst NAME = 'skipAudit';\nconst DATATEST = 'input-has-authority-to-skip-audit';\nconst LABEL = i18n.t('Skip audit');\nconst HELPTEXT = i18n.t('Improves performance at the cost of ability to audit changes');\n\nconst SkipAudit = ({\n  value\n}) => <Switch name={NAME} label={LABEL} value={value} dataTest={DATATEST} help={HELPTEXT} />;\n\nSkipAudit.propTypes = {\n  value: PropTypes.bool.isRequired\n};\nexport { SkipAudit };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Switch } from '../';\nconst NAME = 'skipExistingCheck';\nconst DATATEST = 'input-skip-exisiting-check';\nconst LABEL = i18n.t('Skip exisiting check');\nconst HELPTEXT = i18n.t('Faster, but unsafe');\n\nconst SkipExistingCheck = ({\n  value\n}) => <Switch name={NAME} label={LABEL} value={value} dataTest={DATATEST} help={HELPTEXT} />;\n\nSkipExistingCheck.propTypes = {\n  value: PropTypes.bool.isRequired\n};\nexport { SkipExistingCheck };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { identifierOptions } from '../../utils/options';\nimport { RadioGroupField } from '../';\nconst NAME = 'identifier';\nconst DATATEST = 'input-identifier';\nconst LABEL = i18n.t('Identifier');\n\nconst Identifier = () => <RadioGroupField name={NAME} label={LABEL} options={identifierOptions} dataTest={DATATEST} />;\n\nexport { Identifier };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { importReportModeOptions } from '../../utils/options';\nimport { RadioGroupField } from '../';\nconst NAME = 'importReportMode';\nconst DATATEST = 'input-import-report-mode';\nconst LABEL = i18n.t('Import report mode');\n\nconst ImportReportMode = () => <RadioGroupField name={NAME} label={LABEL} options={importReportModeOptions} dataTest={DATATEST} />;\n\nexport { ImportReportMode };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { preheatModeOptions } from '../../utils/options';\nimport { RadioGroupField } from '../';\nconst NAME = 'preheatMode';\nconst DATATEST = 'input-preheat-mode';\nconst LABEL = i18n.t('Preheat mode');\n\nconst PreheatMode = () => <RadioGroupField name={NAME} label={LABEL} options={preheatModeOptions} dataTest={DATATEST} />;\n\nexport { PreheatMode };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { importStrategyOptions } from '../../utils/options';\nimport { RadioGroupField } from '../';\nconst NAME = 'importStrategy';\nconst DATATEST = 'input-import-strategy';\nconst LABEL = i18n.t('Import strategy');\n\nconst ImportStrategy = () => <RadioGroupField name={NAME} label={LABEL} options={importStrategyOptions} dataTest={DATATEST} />;\n\nexport { ImportStrategy };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { atomicModeOptions } from '../../utils/options';\nimport { RadioGroupField } from '../';\nconst NAME = 'atomicMode';\nconst DATATEST = 'input-atomic-mode';\nconst LABEL = i18n.t('Atomic mode');\n\nconst AtomicMode = () => <RadioGroupField name={NAME} label={LABEL} options={atomicModeOptions} dataTest={DATATEST} />;\n\nexport { AtomicMode };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { mergeModeOptions } from '../../utils/options';\nimport { RadioGroupField } from '../';\nconst NAME = 'mergeMode';\nconst DATATEST = 'input-merge-mode';\nconst LABEL = i18n.t('Merge mode');\n\nconst MergeMode = () => <RadioGroupField name={NAME} label={LABEL} options={mergeModeOptions} dataTest={DATATEST} />;\n\nexport { MergeMode };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { flushModeOptions } from '../../utils/options';\nimport { RadioGroupField } from '../';\nconst NAME = 'flushMode';\nconst DATATEST = 'input-flush-mode';\nconst LABEL = i18n.t('Flush mode');\n\nconst FlushMode = () => <RadioGroupField name={NAME} label={LABEL} options={flushModeOptions} dataTest={DATATEST} />;\n\nexport { FlushMode };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { inclusionStrategyOptions } from '../../utils/options';\nimport { RadioGroupField } from '../';\nconst NAME = 'inclusionStrategy';\nconst DATATEST = 'input-inclusion-strategy';\nconst LABEL = i18n.t('Inclusion strategy');\n\nconst InclusionStrategy = () => <RadioGroupField name={NAME} label={LABEL} options={inclusionStrategyOptions} dataTest={DATATEST} />;\n\nexport { InclusionStrategy };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Switch } from '../';\nconst NAME = 'skipSharing';\nconst DATATEST = 'input-skip-sharing';\nconst LABEL = i18n.t('Skip sharing');\n\nconst SkipSharing = ({\n  value\n}) => <Switch name={NAME} label={LABEL} value={value} dataTest={DATATEST} />;\n\nSkipSharing.propTypes = {\n  value: PropTypes.bool.isRequired\n};\nexport { SkipSharing };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Switch } from '../';\nconst NAME = 'skipValidation';\nconst DATATEST = 'input-skip-validation';\nconst LABEL = i18n.t('Skip validation');\n\nconst SkipValidation = ({\n  value\n}) => <Switch name={NAME} label={LABEL} value={value} dataTest={DATATEST} />;\n\nSkipValidation.propTypes = {\n  value: PropTypes.bool.isRequired\n};\nexport { SkipValidation };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Switch } from '../';\nconst NAME = 'isAsync';\nconst DATATEST = 'input-is-async';\nconst LABEL = i18n.t('Async');\n\nconst IsAsync = ({\n  value\n}) => <Switch name={NAME} label={LABEL} value={value} dataTest={DATATEST} />;\n\nIsAsync.propTypes = {\n  value: PropTypes.bool.isRequired\n};\nexport { IsAsync };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { hasValue, composeValidators } from '@dhis2/ui-forms';\nimport { OrgUnitTreeField } from '../../components/';\nimport { SINGLE_ORG_VALIDATOR, SINGLE_EXACT_ORG_VALIDATOR } from '../../components/OrgUnitTree/OrgUnitTreeField';\nconst NAME = 'selectedOrgUnits';\nconst LABEL = i18n.t('Organisation unit');\nconst DATATEST = 'input-org-unit-tree';\n\nconst OrgUnitTree = ({\n  multiSelect = true\n}) => {\n  const orgValidator = multiSelect ? SINGLE_ORG_VALIDATOR : SINGLE_EXACT_ORG_VALIDATOR;\n  const validator = composeValidators(hasValue, orgValidator);\n  return <OrgUnitTreeField name={NAME} validator={validator} multiSelect={multiSelect} label={LABEL} dataTest={DATATEST} />;\n};\n\nOrgUnitTree.propTypes = {\n  multiSelect: PropTypes.bool\n};\nexport { OrgUnitTree };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { hasValue, composeValidators } from '@dhis2/ui-forms';\nimport { DataSetPickerField } from '../../components/';\nimport { SINGLE_DATASET_VALIDATOR, SINGLE_EXACT_DATASET_VALIDATOR } from '../../components/DataSetPicker/DataSetPickerField';\nconst NAME = 'selectedDataSets';\nconst LABEL = i18n.t('Data sets');\nconst DATATEST = 'input-data-set-picker';\n\nconst DataSetPicker = ({\n  multiSelect = true\n}) => {\n  const dataSetValidator = multiSelect ? SINGLE_DATASET_VALIDATOR : SINGLE_EXACT_DATASET_VALIDATOR;\n  const validator = composeValidators(hasValue, dataSetValidator);\n  return <DataSetPickerField name={NAME} validator={validator} multiSelect={multiSelect} label={LABEL} dataTest={DATATEST} />;\n};\n\nDataSetPicker.propTypes = {\n  multiSelect: PropTypes.bool\n};\nexport { DataSetPicker };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { hasValue, composeValidators } from '@dhis2/ui-forms';\nimport { ProgramPickerField } from '../../components/';\nimport { SINGLE_PROGRAM_VALIDATOR, SINGLE_EXACT_PROGRAM_VALIDATOR } from '../../components/ProgramPicker/ProgramPickerField';\nconst NAME = 'selectedPrograms';\nconst LABEL = i18n.t('Programs');\nconst DATATEST = 'input-program-picker';\n\nconst ProgramPicker = ({\n  multiSelect,\n  ...rest\n}) => {\n  const programValidator = multiSelect ? SINGLE_PROGRAM_VALIDATOR : SINGLE_EXACT_PROGRAM_VALIDATOR;\n  const validator = composeValidators(hasValue, programValidator);\n  return <ProgramPickerField name={NAME} multiSelect={multiSelect} validator={validator} withActions={false} label={LABEL} dataTest={DATATEST} {...rest} />;\n};\n\nProgramPicker.defaultProps = {\n  multiSelect: false\n};\nProgramPicker.propTypes = {\n  multiSelect: PropTypes.bool\n};\nexport { ProgramPicker };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Switch } from '../';\nconst NAME = 'includeChildren';\nconst DATATEST = 'input-include-children';\nconst LABEL = i18n.t('Include children');\n\nconst IncludeChildren = ({\n  value\n}) => <Switch name={NAME} label={LABEL} value={value} dataTest={DATATEST} />;\n\nIncludeChildren.propTypes = {\n  value: PropTypes.bool.isRequired\n};\nexport { IncludeChildren };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Switch } from '../';\nconst NAME = 'includeDeleted';\nconst DATATEST = 'input-include-deleted';\nconst LABEL = i18n.t('Include deleted');\n\nconst IncludeDeleted = ({\n  value\n}) => <Switch name={NAME} label={LABEL} value={value} dataTest={DATATEST} />;\n\nIncludeDeleted.propTypes = {\n  value: PropTypes.bool.isRequired\n};\nexport { IncludeDeleted };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { RadioGroupField } from '../';\nimport { optionsPropType } from '../../utils/options';\nconst NAME = 'compression';\nconst DATATEST = 'input-compression';\nconst LABEL = i18n.t('Compression');\n\nconst Compression = ({\n  availableCompressions\n}) => <RadioGroupField name={NAME} label={LABEL} options={availableCompressions} dataTest={DATATEST} />;\n\nCompression.propTypes = {\n  availableCompressions: optionsPropType.isRequired\n};\nexport { Compression };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { inclusionOptions } from '../../utils/options';\nimport { RadioGroupField } from '../';\nconst NAME = 'inclusion';\nconst DATATEST = 'input-inclusion';\nconst LABEL = i18n.t('Inclusion');\n\nconst Inclusion = () => <RadioGroupField name={NAME} label={LABEL} options={inclusionOptions} dataTest={DATATEST} />;\n\nexport { Inclusion };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { hasValue, composeValidators } from '@dhis2/ui-forms';\nimport { DatePickerField } from '../';\nimport { DATE_VALIDATOR } from '../DatePicker/DatePickerField';\nconst NAME = 'startDate';\nconst DATATEST = 'input-start-date';\nconst LABEL = i18n.t('Start date');\nconst VALIDATOR = composeValidators(hasValue, DATE_VALIDATOR);\n\nconst StartDate = () => <DatePickerField name={NAME} validator={VALIDATOR} label={LABEL} dataTest={DATATEST} />;\n\nexport { StartDate };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { hasValue, composeValidators } from '@dhis2/ui-forms';\nimport { DatePickerField } from '../';\nimport { DATE_VALIDATOR } from '../DatePicker/DatePickerField';\nconst NAME = 'endDate';\nconst DATATEST = 'input-end-date';\nconst LABEL = i18n.t('End date');\nconst VALIDATOR = composeValidators(hasValue, DATE_VALIDATOR);\n\nconst EndDate = () => <DatePickerField name={NAME} validator={VALIDATOR} label={LABEL} dataTest={DATATEST} />;\n\nexport { EndDate };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { Button } from '@dhis2/ui-core';\nconst DATATEST = 'input-export-submit';\nconst LABEL = i18n.t('Export');\n\nconst ExportButton = () => <Button primary type=\"submit\" dataTest={DATATEST}>\n        {LABEL}\n    </Button>;\n\nexport { ExportButton };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { hasValue, composeValidators } from '@dhis2/ui-forms';\nimport { ProgramStages as ProgramStagesGeneric } from '../../components/';\nimport { SINGLE_EXACT_PROGRAMSTAGE_VALIDATOR } from '../../components/ProgramStages/ProgramStages';\nconst VALIDATOR = composeValidators(hasValue, SINGLE_EXACT_PROGRAMSTAGE_VALIDATOR);\nconst NAME = 'programStage';\nconst LABEL = i18n.t('Program stage');\nconst DATATEST = 'input-program-stage-select';\n\nconst ProgramStages = props => <ProgramStagesGeneric name={NAME} label={LABEL} validator={VALIDATOR} dataTest={DATATEST} {...props} />;\n\nexport { ProgramStages };","/**\n * Group and sort schemas\n * ======================\n */\nconst groupSchemas = schemas => schemas.reduce((groups, schema) => {\n  const {\n    group\n  } = schema;\n  return { ...groups,\n    // add schema to \"group\" collection if existing,\n    // otherwise create new collection with schema as first entry\n    [group]: groups[group] ? [...groups[group], schema] : [schema]\n  };\n}, {});\n\nconst combineSingleItemGroups = groups => {\n  const groupNames = Object.keys(groups);\n  return groupNames.reduce((combinedGroups, groupName) => {\n    const group = groups[groupName];\n\n    if (group.length === 1) {\n      return { ...combinedGroups,\n        other: [...combinedGroups.other, group[0]]\n      };\n    }\n\n    return { ...combinedGroups,\n      [groupName]: group\n    };\n  }, {\n    other: []\n  });\n};\n/**\n * Get group label helpers\n * =======================\n */\n\n/**\n * This function will loop through all schemas and\n * compare the the lower case groupKey with\n * the schemas' name.\n * If a match is found, that match will be returned\n */\n\n\nfunction findLabelByLowerCaseComparison(groupKey, schemas) {\n  const isGroupKeyMatchingLowerCaseSchemaName = schemaName => groupKey === schemaName.toLowerCase();\n\n  return schemas.reduce((foundLabel, {\n    name: schemaName,\n    displayName\n  }) => {\n    // do not try to compare anything if a label already\n    // has been found\n    if (foundLabel) return foundLabel;\n\n    if (isGroupKeyMatchingLowerCaseSchemaName(schemaName)) {\n      return displayName;\n    }\n\n    return foundLabel;\n  }, '');\n}\n\nconst ucFirst = str => str[0].toUpperCase() + str.substr(1);\n/**\n * This function will go through all schemas\n * and will compare the scheme name with the\n * lower case group key at position 0 of the schema key.\n * Once a match is found, the match will be extracted,\n * spaces will be inserted before all capital letters\n * and the result returned\n */\n\n\nfunction findKeyByCamelCaseComparison(groupKey, schemas) {\n  const isGroupKeyInSchemaName = schemaName => schemaName.includes(groupKey) && schemaName.indexOf(groupKey) === 0; // Will return either a label or an empty string\n  // if no match for the groupKey was found\n\n\n  return schemas.reduce((foundLabel, {\n    name: schemaName\n  }) => {\n    // do not try to compare anything if a label already\n    // has been found\n    if (foundLabel) return foundLabel;\n    const lowerCaseSchemaName = schemaName.toLowerCase();\n\n    if (isGroupKeyInSchemaName(lowerCaseSchemaName)) {\n      return ucFirst(schemaName // extract part that matches the groupKey\n      .substr(0, groupKey.length) // insert space before capital letters\n      .replace(/([A-Z]+)/g, ' $1'));\n    }\n\n    return foundLabel;\n  }, '');\n}\n\nfunction extractGroupLabelFromSchemas(groupKey, schemas) {\n  const lowerCaseGroupKey = groupKey.toLowerCase();\n\n  if (lowerCaseGroupKey === 'oauth2' || lowerCaseGroupKey === 'other') {\n    return groupKey;\n  }\n\n  return findLabelByLowerCaseComparison(lowerCaseGroupKey, schemas) || findKeyByCamelCaseComparison(lowerCaseGroupKey, schemas) || groupKey[0].toUpperCase() + groupKey.substr(1);\n}\n\nconst getSchemaGroups = schemas => {\n  const groups = groupSchemas(schemas);\n  const combinedGroups = combineSingleItemGroups(groups);\n  return combinedGroups;\n};\n\nconst getGroupLabels = schemaGroups => {\n  return Object.entries(schemaGroups).reduce((groupLabels, [groupKey, schemas]) => {\n    const label = extractGroupLabelFromSchemas(groupKey, schemas);\n    return { ...groupLabels,\n      [groupKey]: label\n    };\n  }, {});\n};\n\nconst getGroupOrder = schemas => {\n  const groupKeys = Object.keys(schemas);\n  groupKeys.sort();\n  return groupKeys;\n};\n\nconst filterOutExcludedSchemas = (excludedSchemas, schemas) => schemas.filter(schema => schema.metadata && !excludedSchemas.has(schema.collectionName));\n\nconst groupName = klass => {\n  const group = klass.split('.');\n  group.pop();\n\n  if (!klass.includes('.dhis')) {\n    group.pop();\n  }\n\n  return group[group.length - 1].replace(/(.)([A-Z])/g, '$1 $2');\n};\n\nconst formatSchemas = (schemas, checkedByDefault) => schemas.map(schema => ({\n  checked: checkedByDefault,\n  label: schema.displayName,\n  name: schema.collectionName,\n  group: groupName(schema.klass)\n}));\n\nexport { filterOutExcludedSchemas, groupName, formatSchemas, getSchemaGroups, getGroupLabels, getGroupOrder };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox } from '@dhis2/ui-core';\nimport styles from './Schemas.module.css';\n\nconst SchemaGroup = ({\n  label,\n  schemas,\n  toggleSchema,\n  dataTest\n}) => <div className={styles.group} data-test={dataTest}>\n        <span className={styles.formLabel}>{label}</span>\n        <div className={styles.schema}>\n            {schemas.map((schema, ind) => <div key={schema.name}>\n                    <Checkbox label={schema.label} name={`schemas.${schema.name}`} value={`schemas.${schema.name}`} checked={schema.checked} onChange={() => toggleSchema(ind)} />\n                </div>)}\n        </div>\n    </div>;\n\nSchemaGroup.propTypes = {\n  label: PropTypes.string.isRequired,\n  schemas: PropTypes.arrayOf(PropTypes.exact({\n    checked: PropTypes.bool.isRequired,\n    label: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    group: PropTypes.string.isRequired\n  })).isRequired,\n  toggleSchema: PropTypes.func.isRequired,\n  dataTest: PropTypes.string\n};\nexport { SchemaGroup };","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport i18n from '@dhis2/d2-i18n';\nimport { Button, ButtonStrip, CircularLoader, Help } from '@dhis2/ui-core';\nimport { filterOutExcludedSchemas, formatSchemas, getSchemaGroups, getGroupLabels, getGroupOrder } from './helper';\nimport { SchemaGroup } from './SchemaGroup';\nimport styles from './Schemas.module.css';\nconst schemaQuery = {\n  schemas: {\n    resource: 'schemas',\n    params: {\n      fields: ['metadata', 'collectionName', 'displayName', 'klass']\n    }\n  }\n};\n\nconst Schemas = ({\n  excludeSchemas,\n  setCheckedSchemas,\n  meta,\n  checkedByDefault,\n  dataTest\n}) => {\n  const [schemaGroups, setSchemaGroups] = useState(undefined);\n  const [schemaGroupLabels, setSchemaGroupLabels] = useState(undefined);\n  const [schemaGroupOrder, setSchemaGroupOrder] = useState(undefined);\n  const {\n    error,\n    loading\n  } = useDataQuery(schemaQuery, {\n    onComplete: data => {\n      const schemas = data.schemas.schemas;\n      const filteredSchemas = filterOutExcludedSchemas(excludeSchemas, schemas);\n      const formattedSchemas = formatSchemas(filteredSchemas, checkedByDefault);\n      const groups = getSchemaGroups(formattedSchemas);\n      setSchemaGroups(groups);\n      setSchemaGroupOrder(getGroupOrder(groups));\n      setSchemaGroupLabels(getGroupLabels(groups));\n      propagateCheckedSchemas(groups);\n    },\n    onError: error => {\n      console.error('Schemas error: ', error);\n    }\n  });\n\n  const propagateCheckedSchemas = updatedSchemaGroups => {\n    setCheckedSchemas(Object.keys(updatedSchemaGroups).reduce((acc, groupName) => [...acc, ...updatedSchemaGroups[groupName].filter(s => s.checked).map(s => s.name)], []));\n  };\n\n  const onSelectGeneric = val => () => {\n    const updatedSchemaGroups = Object.keys(schemaGroups).reduce((acc, groupName) => ({ ...acc,\n      [groupName]: schemaGroups[groupName].reduce((grAcc, group) => [...grAcc, { ...group,\n        checked: val\n      }], [])\n    }), {});\n    setSchemaGroups(updatedSchemaGroups);\n    propagateCheckedSchemas(updatedSchemaGroups);\n  };\n\n  const toggleSchema = schemaGroup => ind => {\n    const updatedGroup = [...schemaGroups[schemaGroup]];\n    updatedGroup[ind] = { ...updatedGroup[ind],\n      checked: !updatedGroup[ind].checked\n    };\n    const updatedSchemaGroups = { ...schemaGroups,\n      [schemaGroup]: updatedGroup\n    };\n    setSchemaGroups(updatedSchemaGroups);\n    propagateCheckedSchemas(updatedSchemaGroups);\n  };\n\n  const showSchemas = !loading && !error;\n  return <div className={styles.container} data-test={dataTest}>\n            {loading && <CircularLoader dataTest={`${dataTest}-loading`} />}\n            {error && <div data-test={`${dataTest}-error`}>\n                    <p>\n                        {i18n.t('Something went wrong when loading the schemas!')}\n                    </p>\n                    <p>{error.message}</p>\n                </div>}\n            {showSchemas && <>\n                    <ButtonStrip>\n                        <Button onClick={onSelectGeneric(true)} dataTest={`${dataTest}-select-all`}>\n                            {i18n.t('Select All')}\n                        </Button>\n                        <Button onClick={onSelectGeneric(false)} dataTest={`${dataTest}-select-none`}>\n                            {i18n.t('Select None')}\n                        </Button>\n                    </ButtonStrip>\n\n                    <div className={styles.formControl}>\n                        {schemaGroupOrder.map(groupKey => {\n          const label = schemaGroupLabels[groupKey];\n          return <SchemaGroup key={label} label={label} schemas={schemaGroups[groupKey]} toggleSchema={toggleSchema(groupKey)} />;\n        })}\n                    </div>\n                    {(meta.touched || !meta.pristine) && meta.error && <Help error>{meta.error}</Help>}\n                </>}\n        </div>;\n};\n\nSchemas.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  excludeSchemas: PropTypes.object.isRequired,\n  meta: PropTypes.object.isRequired,\n  setCheckedSchemas: PropTypes.func.isRequired,\n  checkedByDefault: PropTypes.bool\n};\nexport { Schemas };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Field } from '@dhis2/ui-forms';\nimport { Schemas } from './Schemas';\n\nconst SINGLE_SCHEMA_VALIDATOR = checkedSchemas => checkedSchemas.length == 0 ? i18n.t('At least one schema must be selected') : undefined;\n\nconst Wrapper = ({\n  input: {\n    onChange\n  },\n  meta,\n  ...rest\n}) => <Schemas meta={meta} setCheckedSchemas={onChange} {...rest} />;\n\nWrapper.propTypes = {\n  input: PropTypes.shape({\n    value: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onChange: PropTypes.func\n  }).isRequired,\n  meta: PropTypes.shape({\n    error: PropTypes.string,\n    pristine: PropTypes.bool,\n    touched: PropTypes.bool\n  }).isRequired\n};\n\nconst SchemasField = ({\n  name,\n  validator,\n  ...rest\n}) => {\n  return <Field component={Wrapper} name={name} validate={validator} {...rest} />;\n};\n\nSchemasField.propTypes = {\n  name: PropTypes.string.isRequired,\n  validator: PropTypes.func\n};\nexport { SchemasField, SINGLE_SCHEMA_VALIDATOR };","import React from 'react';\nimport { hasValue, composeValidators } from '@dhis2/ui-forms';\nimport { SchemasField } from '../../components/';\nimport { SINGLE_SCHEMA_VALIDATOR } from '../../components/Schemas/SchemasField';\nconst NAME = 'checkedSchemas';\nconst VALIDATOR = composeValidators(hasValue, SINGLE_SCHEMA_VALIDATOR);\nconst DATATEST = 'input-schemas';\nconst EXCLUDE_SCHEMAS = new Set(['analyticsTableHooks', 'charts', 'constants', 'dataElementDimensions', 'dataEntryForms', 'dataSetNotificationTemplates', 'dataStores', 'documents', 'eventCharts', 'eventReports', 'icons', 'jobConfigurations', 'messageConversations', 'metadataVersions', 'minMaxDataElements', 'oAuth2Clients', 'programDataElements', 'programNotificationTemplates', 'pushAnalysis', 'reportTables', 'reportingRates', 'reports', 'sections', 'smsCommands', 'sqlViews', 'trackedEntityInstanceFilters', 'validationNotificationTemplates']);\n\nconst Schemas = () => <SchemasField name={NAME} excludeSchemas={EXCLUDE_SCHEMAS} validator={VALIDATOR} checkedByDefault dataTest={DATATEST} />;\n\nexport { Schemas };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { SelectField } from '../../components/';\nimport { objectTypeOptions } from '../../utils/options';\nconst NAME = 'objectType';\nconst LABEL = i18n.t('Object type');\nconst DATATEST = 'input-object-type';\n\nconst ObjectType = () => <SelectField name={NAME} label={LABEL} options={objectTypeOptions} filled initialFocus dataTest={DATATEST} />;\n\nexport { ObjectType };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { hasValue, composeValidators } from '@dhis2/ui-forms';\nimport i18n from '@dhis2/d2-i18n';\nimport { SelectField } from '../';\nimport { useObjects } from '../../hooks/';\n\nconst SINGLE_EXACT_OBJECT_VALIDATOR = object => !object ? i18n.t('One object must be selected') : undefined;\n\nconst NAME = 'object';\nconst LABEL = i18n.t('Object');\nconst VALIDATOR = composeValidators(hasValue, SINGLE_EXACT_OBJECT_VALIDATOR);\nconst DATATEST = 'input-object-select';\n\nconst Objects = ({\n  objectType,\n  form\n}) => {\n  const setObjectListSelected = val => form.change(NAME, val);\n\n  const {\n    loading: objectsLoading,\n    error: objectsError,\n    validationText: objectsValidationText,\n    objects\n  } = useObjects(objectType, setObjectListSelected);\n  return <SelectField loading={objectsLoading} name={NAME} label={LABEL} options={objects} validate={VALIDATOR} dataTest={DATATEST} validationText={objectsValidationText} error={!!objectsError} filterable dense />;\n};\n\nObjects.propTypes = {\n  form: PropTypes.object.isRequired,\n  objectType: PropTypes.object.isRequired\n};\nexport { Objects };","import { useState, useEffect } from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { useDataEngine } from '@dhis2/app-runtime';\n\nconst listQuery = resource => ({\n  data: {\n    resource: resource,\n    fields: 'id,displayName',\n    params: {\n      paging: 'false'\n    }\n  }\n});\n\nconst useObjects = (type, setSelected) => {\n  const engine = useDataEngine();\n  const [error, setError] = useState(undefined);\n  const [loading, setLoading] = useState(true);\n  const [objects, setObjects] = useState([]);\n  useEffect(() => {\n    setLoading(true);\n    setSelected(undefined);\n    engine.query(listQuery(type.value), {\n      onComplete: data => {\n        const list = data.data[type.value];\n        const formattedList = list.map(e => ({\n          value: e.id,\n          label: e.displayName\n        }));\n        setObjects(formattedList);\n        setSelected(formattedList[0]);\n        setLoading(false);\n      },\n      onError: error => {\n        setError(error);\n        console.error('useObjects error: ', error);\n      }\n    });\n  }, [type]);\n  const validationText = error && `${i18n.t('Something went wrong when loading the objects')} : ${error.message}`;\n  return {\n    loading,\n    error,\n    validationText,\n    objects\n  };\n};\n\nexport { useObjects };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { DataElementIdScheme as DataElementIdSchemeGeneric } from '../';\nconst NAME = 'dataElementIdScheme';\nconst DATATEST = 'input-data-element-id-scheme';\nconst LABEL = i18n.t('Data element ID scheme');\n\nconst DataElementIdScheme = () => <DataElementIdSchemeGeneric name={NAME} label={LABEL} dataTest={DATATEST} />;\n\nexport { DataElementIdScheme };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { EventIdScheme as EventIdSchemeGeneric } from '../';\nconst NAME = 'eventIdScheme';\nconst DATATEST = 'input-event-id-scheme';\nconst LABEL = i18n.t('Event ID scheme');\n\nconst EventIdScheme = () => <EventIdSchemeGeneric name={NAME} label={LABEL} dataTest={DATATEST} />;\n\nexport { EventIdScheme };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { IdScheme as IdSchemeGeneric } from '../';\nconst NAME = 'idScheme';\nconst DATATEST = 'input-id-scheme';\nconst LABEL = i18n.t('ID scheme');\n\nconst IdScheme = () => <IdSchemeGeneric name={NAME} label={LABEL} dataTest={DATATEST} />;\n\nexport { IdScheme };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { OrgUnitIdScheme as OrgUnitIdSchemeGeneric } from '../';\nconst NAME = 'orgUnitIdScheme';\nconst DATATEST = 'input-org-unit-id-scheme';\nconst LABEL = i18n.t('Organisation unit ID scheme');\n\nconst OrgUnitIdScheme = () => <OrgUnitIdSchemeGeneric name={NAME} label={LABEL} dataTest={DATATEST} />;\n\nexport { OrgUnitIdScheme };","export const FORM_ERROR = 'FINAL_FORM/form-error';\nexport const ARRAY_ERROR = 'FINAL_FORM/array-error';","import i18n from '@dhis2/d2-i18n';\nimport { FORM_ERROR } from '../../utils/final-form';\nimport { uploadFile } from '../../utils/helper';\n\nconst onImport = ({\n  baseUrl,\n  setProgress,\n  addTask,\n  setShowFullSummaryTask\n}) => async values => {\n  const {\n    dryRun,\n    files,\n    format,\n    identifier,\n    importReportMode,\n    preheatMode,\n    importStrategy,\n    atomicMode,\n    mergeMode,\n    flushMode,\n    skipSharing,\n    skipValidation,\n    inclusionStrategy,\n    isAsync,\n    firstRowIsHeader,\n    classKey\n  } = values; // send xhr\n\n  const apiBaseUrl = `${baseUrl}/api/`;\n  const endpoint = 'metadata.json';\n  const params = [`importMode=${dryRun ? 'VALIDATE' : 'COMMIT'}`, `identifier=${identifier.value}`, `importReportMode=${importReportMode.value}`, `preheatMode=${preheatMode.value}`, `importStrategy=${importStrategy.value}`, `atomicMode=${atomicMode.value}`, `mergeMode=${mergeMode.value}`, `flushMode=${flushMode.value}`, `skipSharing=${skipSharing}`, `skipValidation=${skipValidation}`, `inclusionStrategy=${inclusionStrategy.value}`, `async=${isAsync}`, `format=${format.value}`, format.value == 'csv' ? `firstRowIsHeader=${firstRowIsHeader}&classKey=${classKey.value}` : ''].filter(s => s != '').join('&');\n  const url = `${apiBaseUrl}${endpoint}?${params}`;\n\n  try {\n    await uploadFile({\n      url,\n      file: files[0],\n      format: format.value,\n      type: 'METADATA_IMPORT',\n      setProgress,\n      addEntry: (id, entry) => addTask('metadata', id, { ...entry,\n        jobDetails: values\n      })\n    });\n  } catch (e) {\n    const formErrors = validate(values);\n    const allErrors = {\n      [FORM_ERROR]: [e],\n      ...formErrors\n    };\n    return allErrors;\n  } finally {\n    setShowFullSummaryTask(true);\n  }\n};\n\nconst validate = values => {\n  const classKeyValidator = (format, classKey) => format.value == 'csv' && !classKey ? i18n.t('A class key must be selected') : undefined;\n\n  return {\n    classKey: classKeyValidator(values.format, values.classKey)\n  };\n};\n\nexport { onImport, validate };","import React, { useContext, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useConfig } from '@dhis2/app-runtime';\nimport { Form } from '@dhis2/ui-forms';\nimport i18n from '@dhis2/d2-i18n';\nimport { getPrevJobDetails } from '../../utils/helper';\nimport { formatOptions, defaultFormatOption, defaultIdentifierOption, defaultImportReportModeOption, defaultPreheatModeOption, defaultImportStrategyOption, defaultAtomicModeOption, defaultMergeModeOption, defaultFlushModeOption, defaultInclusionStrategyOption } from '../../utils/options';\nimport { FileUpload, Format, FirstRowIsHeader, ClassKey, Identifier, ImportReportMode, PreheatMode, ImportStrategy, AtomicMode, MergeMode, FlushMode, SkipSharing, SkipValidation, IsAsync, InclusionStrategy, ImportButtonStrip, FormAlerts } from '../../components/Inputs';\nimport { Page, MetadataImportIcon, MoreOptions } from '../../components/';\nimport { TaskContext, getNewestTask } from '../../contexts/';\nimport { onImport } from './form-helper'; // PAGE INFO\n\nconst PAGE_NAME = i18n.t('Metadata import');\nconst PAGE_DESCRIPTION = i18n.t('Import metadata like data elements and organisation units using the DXF 2 format.');\nconst PAGE_ICON = <MetadataImportIcon />;\n\nconst createInitialValues = prevJobDetails => ({\n  files: prevJobDetails.files,\n  format: prevJobDetails.format || defaultFormatOption,\n  identifier: prevJobDetails.identifier || defaultIdentifierOption,\n  importReportMode: prevJobDetails.importReportMode || defaultImportReportModeOption,\n  preheatMode: prevJobDetails.preheatMode || defaultPreheatModeOption,\n  importStrategy: prevJobDetails.importStrategy || defaultImportStrategyOption,\n  firstRowIsHeader: !!prevJobDetails.firstRowIsHeader,\n  atomicMode: prevJobDetails.atomicMode || defaultAtomicModeOption,\n  mergeMode: prevJobDetails.mergeMode || defaultMergeModeOption,\n  flushMode: prevJobDetails.flushMode || defaultFlushModeOption,\n  inclusionStrategy: prevJobDetails.inclusionStrategy || defaultInclusionStrategyOption,\n  skipSharing: !!prevJobDetails.skipSharing,\n  skipValidation: !!prevJobDetails.skipValidation,\n  isAsync: !prevJobDetails.isAsync\n});\n\nconst MetadataImport = () => {\n  const {\n    tasks: {\n      metadata: metadataTasks\n    },\n    addTask\n  } = useContext(TaskContext); // recreating a previously run job\n\n  const query = useLocation().query;\n  const prevJobDetails = getPrevJobDetails(query, metadataTasks);\n  const initialValues = createInitialValues(prevJobDetails);\n  const [progress, setProgress] = useState(0);\n  const [showFullSummaryTask, setShowFullSummaryTask] = useState(false);\n  const {\n    baseUrl\n  } = useConfig();\n  const onSubmit = onImport({\n    baseUrl,\n    setProgress,\n    addTask,\n    setShowFullSummaryTask\n  });\n  return <Page title={PAGE_NAME} desc={PAGE_DESCRIPTION} icon={PAGE_ICON} loading={progress} dataTest=\"page-import-metadata\" summaryTask={getNewestTask(metadataTasks)} showFullSummaryTask={showFullSummaryTask}>\n            <Form onSubmit={onSubmit} initialValues={initialValues} subscription={{\n      values: true,\n      submitError: true\n    }} render={({\n      handleSubmit,\n      form,\n      values,\n      submitError\n    }) => <form onSubmit={handleSubmit}>\n                        <FileUpload />\n                        <Format availableFormats={formatOptions} />\n                        <FirstRowIsHeader show={values.format.value == 'csv'} value={values.firstRowIsHeader} />\n                        <ClassKey show={values.format.value == 'csv'} form={form} prevValue={prevJobDetails.classKey} />\n                        <Identifier />\n                        <ImportReportMode />\n                        <PreheatMode />\n                        <ImportStrategy />\n                        <AtomicMode />\n                        <MergeMode />\n                        <MoreOptions>\n                            <FlushMode />\n                            <SkipSharing value={values.skipSharing} />\n                            <SkipValidation value={values.skipValidation} />\n                            <IsAsync value={values.isAsync} />\n                            <InclusionStrategy />\n                        </MoreOptions>\n                        <ImportButtonStrip form={form} />\n                        <FormAlerts alerts={submitError} />\n                    </form>} />\n        </Page>;\n};\n\nexport { MetadataImport };","import React from 'react';\nimport { useConfig } from '@dhis2/app-runtime';\nimport i18n from '@dhis2/d2-i18n';\nimport { Form } from '@dhis2/ui-forms';\nimport { formatOptions, compressionOptions, defaultFormatOption, defaultCompressionOption } from '../../utils/options';\nimport { Format, Schemas, Compression, SkipSharing, ExportButton } from '../../components/Inputs';\nimport { Page, MetadataExportIcon } from '../../components/';\nimport { onExport } from './form-helper'; // PAGE INFO\n\nconst PAGE_NAME = i18n.t('Metadata export');\nconst PAGE_DESCRIPTION = i18n.t('Export meta data like data elements and organisation units in the XML, JSON or CSV format.');\nconst PAGE_ICON = <MetadataExportIcon />;\nconst initialValues = {\n  checkedSchemas: [],\n  format: defaultFormatOption,\n  compression: defaultCompressionOption,\n  skipSharing: false\n};\n\nconst MetadataExport = () => {\n  const {\n    baseUrl\n  } = useConfig();\n  const onSubmit = onExport(baseUrl);\n  return <Page title={PAGE_NAME} desc={PAGE_DESCRIPTION} icon={PAGE_ICON} dataTest=\"page-export-metadata\">\n            <Form onSubmit={onSubmit} initialValues={initialValues} render={({\n      handleSubmit,\n      form,\n      values\n    }) => <form onSubmit={handleSubmit}>\n                        <Schemas />\n                        <Format availableFormats={formatOptions} />\n                        <Compression availableCompressions={compressionOptions} />\n                        <SkipSharing value={values.skipSharing} />\n                        <ExportButton />\n                    </form>} />\n        </Page>;\n};\n\nexport { MetadataExport };","import { locationAssign } from '../../utils/helper';\n\nconst onExport = baseUrl => values => {\n  const {\n    checkedSchemas,\n    format,\n    compression,\n    skipSharing\n  } = values; // generate download url\n\n  const apiBaseUrl = `${baseUrl}/api/`;\n  const endpoint = `metadata`;\n  const endpointExtension = compression.value ? `${format.value}.${compression.value}` : format.value;\n  const schemaParams = checkedSchemas.map(name => `${name}=true`).join('&');\n  const downloadUrlParams = `skipSharing=${skipSharing}&download=true&${schemaParams}`;\n  const url = `${apiBaseUrl}${endpoint}.${endpointExtension}?${downloadUrlParams}`;\n  locationAssign(url);\n};\n\nexport { onExport };","import React from 'react';\nimport { useConfig } from '@dhis2/app-runtime';\nimport i18n from '@dhis2/d2-i18n';\nimport { Form } from '@dhis2/ui-forms';\nimport { formatNoCsvOptions, compressionOptions, defaultFormatOption, defaultCompressionOption, defaultObjectTypeOption } from '../../utils/options';\nimport { Format, Compression, ObjectType, Objects, SkipSharing, ExportButton } from '../../components/Inputs';\nimport { Page, MetadataDependencyExportIcon } from '../../components/';\nimport { onExport } from './form-helper'; // PAGE INFO\n\nconst PAGE_NAME = i18n.t('Metadata dependency export');\nconst PAGE_DESCRIPTION = i18n.t('Export metadata like data sets and programs including related metadata objects in the XML or JSON format.');\nconst PAGE_ICON = <MetadataDependencyExportIcon />;\nconst initialValues = {\n  objectType: defaultObjectTypeOption,\n  object: undefined,\n  format: defaultFormatOption,\n  compression: defaultCompressionOption,\n  skipSharing: false\n};\n\nconst MetadataDependencyExport = () => {\n  const {\n    baseUrl\n  } = useConfig();\n  const onSubmit = onExport(baseUrl);\n  return <Page title={PAGE_NAME} desc={PAGE_DESCRIPTION} icon={PAGE_ICON} dataTest=\"page-export-metadata-dependency\">\n            <Form onSubmit={onSubmit} initialValues={initialValues} render={({\n      handleSubmit,\n      form,\n      values\n    }) => <form onSubmit={handleSubmit}>\n                        <ObjectType />\n                        <Objects objectType={values.objectType} form={form} />\n                        <Format availableFormats={formatNoCsvOptions} />\n                        <Compression availableCompressions={compressionOptions} />\n                        <SkipSharing value={values.skipSharing} />\n                        <ExportButton />\n                    </form>} />\n        </Page>;\n};\n\nexport { MetadataDependencyExport };","import { locationAssign } from '../../utils/helper';\n\nconst onExport = baseUrl => values => {\n  const {\n    objectType,\n    object,\n    format,\n    compression,\n    skipSharing\n  } = values;\n  const apiBaseUrl = `${baseUrl}/api/`;\n  const endpoint = `${objectType.value}/${object.value}/metadata`;\n  const endpointExtension = compression.value ? `${format.value}.${compression.value}` : format.value;\n  const downloadUrlParams = `skipSharing=${skipSharing}&download=true`;\n  const url = `${apiBaseUrl}${endpoint}.${endpointExtension}?${downloadUrlParams}`;\n  locationAssign(url);\n};\n\nexport { onExport };","import React, { useContext } from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport styles from './JobOverview.module.css';\nimport { TaskContext } from '../../contexts/';\nimport { JobOverview as JobOverviewComponent, Page, TasksIcon } from '../../components/';\n\nconst JobOverview = () => {\n  const {\n    jobOverview,\n    updateJobOverview\n  } = useContext(TaskContext);\n\n  const setActiveTypes = types => {\n    updateJobOverview({\n      activeTypes: types\n    });\n  };\n\n  const setSelectedJob = job => {\n    updateJobOverview({\n      selectedJob: job\n    });\n  };\n\n  return <Page title={PAGE_NAME} desc={PAGE_DESCRIPTION} icon={PAGE_ICON} dataTest=\"job-overview-page\">\n            <div className={styles.container}>\n                <JobOverviewComponent activeTypes={jobOverview.activeTypes} setActiveTypes={setActiveTypes} selectedJob={jobOverview.selectedJob} setSelectedJob={setSelectedJob} />\n            </div>\n        </Page>;\n}; // PAGE INFO\n\n\nconst PAGE_NAME = i18n.t('Job overview');\nconst PAGE_DESCRIPTION = i18n.t('An overview of all import jobs started this session.');\nconst PAGE_ICON = <TasksIcon />;\nexport { JobOverview };","import React, { useContext, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useConfig } from '@dhis2/app-runtime';\nimport { Form } from '@dhis2/ui-forms';\nimport i18n from '@dhis2/d2-i18n';\nimport { getPrevJobDetails } from '../../utils/helper';\nimport { FileUpload, ImportButtonStrip, FormAlerts } from '../../components/Inputs/';\nimport { Page, GMLIcon } from '../../components/';\nimport { TaskContext, getNewestTask } from '../../contexts/';\nimport { onImport } from './form-helper'; // PAGE INFO\n\nconst PAGE_NAME = i18n.t('GML import');\nconst PAGE_DESCRIPTION = i18n.t('Import geographic data for organisation units using the GML format. GML is an XML grammar for expressing geographical features.');\nconst PAGE_ICON = <GMLIcon />;\n\nconst createInitialValues = prevJobDetails => ({\n  files: prevJobDetails.files\n});\n\nconst GMLImport = () => {\n  const {\n    tasks: {\n      gml: gmlTasks\n    },\n    addTask\n  } = useContext(TaskContext); // recreating a previously run job\n\n  const query = useLocation().query;\n  const prevJobDetails = getPrevJobDetails(query, gmlTasks);\n  const initialValues = createInitialValues(prevJobDetails);\n  const [progress, setProgress] = useState(0);\n  const [showFullSummaryTask, setShowFullSummaryTask] = useState(false);\n  const {\n    baseUrl\n  } = useConfig();\n  const onSubmit = onImport({\n    baseUrl,\n    setProgress,\n    addTask,\n    setShowFullSummaryTask\n  });\n  return <Page title={PAGE_NAME} desc={PAGE_DESCRIPTION} icon={PAGE_ICON} loading={progress} dataTest=\"page-import-gml\" summaryTask={getNewestTask(gmlTasks)} showFullSummaryTask={showFullSummaryTask}>\n            <Form onSubmit={onSubmit} initialValues={initialValues} render={({\n      handleSubmit,\n      form,\n      submitError\n    }) => <form onSubmit={handleSubmit}>\n                        <FileUpload />\n                        <ImportButtonStrip form={form} />\n                        <FormAlerts alerts={submitError} />\n                    </form>} />\n        </Page>;\n};\n\nexport { GMLImport };","import { FORM_ERROR } from '../../utils/final-form';\nimport { uploadFile } from '../../utils/helper';\n\nconst onImport = ({\n  baseUrl,\n  setProgress,\n  addTask,\n  setShowFullSummaryTask\n}) => async values => {\n  const {\n    dryRun,\n    files\n  } = values; // send xhr\n\n  const apiBaseUrl = `${baseUrl}/api/`;\n  const endpoint = 'metadata/gml.json';\n  const params = [`dryRun=${dryRun}`, 'format=json'].join('&');\n  const url = `${apiBaseUrl}${endpoint}?${params}`;\n\n  try {\n    await uploadFile({\n      url,\n      file: files[0],\n      format: 'gml',\n      type: 'GML_IMPORT',\n      setProgress,\n      addEntry: (id, entry) => addTask('gml', id, { ...entry,\n        jobDetails: values\n      })\n    });\n  } catch (e) {\n    const errors = [e];\n    return {\n      [FORM_ERROR]: errors\n    };\n  } finally {\n    setShowFullSummaryTask(true);\n  }\n};\n\nexport { onImport };","import React, { useContext, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useConfig } from '@dhis2/app-runtime';\nimport { Form } from '@dhis2/ui-forms';\nimport i18n from '@dhis2/d2-i18n';\nimport { getPrevJobDetails } from '../../utils/helper';\nimport { formatOptions, defaultFormatOption, defaultDataElementIdSchemeOption, defaultOrgUnitIdSchemeOption, defaultEventIdSchemeOption } from '../../utils/options';\nimport { FileUpload, Format, DataElementIdScheme, EventIdScheme, OrgUnitIdScheme, ImportButtonStrip, FormAlerts } from '../../components/Inputs';\nimport { Page, MoreOptions, EventIcon } from '../../components/';\nimport { TaskContext, getNewestTask } from '../../contexts/';\nimport { onImport } from './form-helper'; // PAGE INFO\n\nconst PAGE_NAME = i18n.t('Event import');\nconst PAGE_DESCRIPTION = i18n.t('Import events for programs, stages and tracked entities using the DXF 2 format.');\nconst PAGE_ICON = <EventIcon />;\n\nconst createInitialValues = prevJobDetails => ({\n  files: prevJobDetails.files,\n  format: prevJobDetails.format || defaultFormatOption,\n  dataElementIdScheme: prevJobDetails.dataElementIdScheme || defaultDataElementIdSchemeOption,\n  orgUnitIdScheme: prevJobDetails.orgUnitIdScheme || defaultOrgUnitIdSchemeOption,\n  eventIdScheme: prevJobDetails.eventIdScheme || defaultEventIdSchemeOption\n});\n\nconst EventImport = () => {\n  const {\n    tasks: {\n      event: eventTasks\n    },\n    addTask\n  } = useContext(TaskContext); // recreating a previously run job\n\n  const query = useLocation().query;\n  const prevJobDetails = getPrevJobDetails(query, eventTasks);\n  const initialValues = createInitialValues(prevJobDetails);\n  const [progress, setProgress] = useState(0);\n  const [showFullSummaryTask, setShowFullSummaryTask] = useState(false);\n  const {\n    baseUrl\n  } = useConfig();\n  const onSubmit = onImport({\n    baseUrl,\n    setProgress,\n    addTask,\n    setShowFullSummaryTask\n  });\n  return <Page title={PAGE_NAME} desc={PAGE_DESCRIPTION} icon={PAGE_ICON} loading={progress} dataTest=\"page-import-event\" summaryTask={getNewestTask(eventTasks)} showFullSummaryTask={showFullSummaryTask}>\n            <Form onSubmit={onSubmit} initialValues={initialValues} subscription={{\n      values: true,\n      submitError: true\n    }} render={({\n      handleSubmit,\n      form,\n      submitError\n    }) => <form onSubmit={handleSubmit}>\n                        <FileUpload />\n                        <Format availableFormats={formatOptions} />\n                        <MoreOptions>\n                            <DataElementIdScheme />\n                            <EventIdScheme />\n                            <OrgUnitIdScheme />\n                        </MoreOptions>\n                        <ImportButtonStrip form={form} />\n                        <FormAlerts alerts={submitError} />\n                    </form>} />\n        </Page>;\n};\n\nexport { EventImport };","import { FORM_ERROR } from '../../utils/final-form';\nimport { uploadFile } from '../../utils/helper';\n\nconst onImport = ({\n  baseUrl,\n  setProgress,\n  addTask,\n  setShowFullSummaryTask\n}) => async values => {\n  const {\n    dryRun,\n    files,\n    format,\n    dataElementIdScheme,\n    orgUnitIdScheme,\n    eventIdScheme\n  } = values; // send xhr\n\n  const apiBaseUrl = `${baseUrl}/api/`;\n  const endpoint = 'events.json';\n  const params = ['skipFirst=true', 'async=true', `dryRun=${dryRun}`, `dataElementIdScheme=${dataElementIdScheme.value}`, `orgUnitIdScheme=${orgUnitIdScheme.value}`, `eventIdScheme=${eventIdScheme.value}`, `payloadFormat=${format.value}`].join('&');\n  const url = `${apiBaseUrl}${endpoint}?${params}`;\n\n  try {\n    await uploadFile({\n      url,\n      file: files[0],\n      format: format.value,\n      type: 'EVENT_IMPORT',\n      setProgress,\n      addEntry: (id, entry) => addTask('event', id, { ...entry,\n        jobDetails: values\n      })\n    });\n  } catch (e) {\n    const errors = [e];\n    return {\n      [FORM_ERROR]: errors\n    };\n  } finally {\n    setShowFullSummaryTask(true);\n  }\n};\n\nexport { onImport };","import { jsDateToISO8601, locationAssign, pathToId } from '../../utils/helper';\nimport { ALL_VALUE } from '../../hooks/useProgramStages';\nimport { DATE_BEFORE_VALIDATOR, DATE_AFTER_VALIDATOR } from '../../components/DatePicker/DatePickerField';\n\nconst onExport = baseUrl => values => {\n  const {\n    selectedOrgUnits,\n    selectedPrograms,\n    programStage,\n    format,\n    compression,\n    startDate,\n    endDate,\n    includeDeleted,\n    idScheme,\n    inclusion\n  } = values; // generate URL and redirect\n\n  const apiBaseUrl = `${baseUrl}/api/`;\n  const endpoint = `events`;\n  const endpointExtension = compression.value ? `${format.value}.${compression.value}` : format.value;\n  const filename = `${endpoint}.${endpointExtension}`;\n  const downloadUrlParams = ['links=false', 'skipPaging=true', `orgUnit=${pathToId(selectedOrgUnits[0])}`, `program=${selectedPrograms[0]}`, `includeDeleted=${includeDeleted}`, `idScheme=${idScheme.value}`, `attachment=${filename}`, `startDate=${jsDateToISO8601(startDate)}`, `endDate=${jsDateToISO8601(endDate)}`, `ouMode=${inclusion.value}`, `format=${format.value}`, programStage.value != ALL_VALUE ? `programStage=${programStage.value}` : ''].filter(s => s != '').join('&');\n  const url = `${apiBaseUrl}${endpoint}.${endpointExtension}?${downloadUrlParams}`;\n  locationAssign(url);\n};\n\nconst validate = values => ({\n  startDate: DATE_BEFORE_VALIDATOR(values.startDate, values.endDate),\n  endDate: DATE_AFTER_VALIDATOR(values.endDate, values.startDate)\n});\n\nexport { onExport, validate };","import React from 'react';\nimport { useConfig } from '@dhis2/app-runtime';\nimport i18n from '@dhis2/d2-i18n';\nimport { Form } from '@dhis2/ui-forms';\nimport { formatOptions, compressionOptions, defaultFormatOption, defaultCompressionOption, defaultIdSchemeOption, defaultInclusionOption } from '../../utils/options';\nimport { OrgUnitTree, ProgramPicker, Format, Compression, StartDate, EndDate, IncludeDeleted, Inclusion, ExportButton, ProgramStages, IdScheme } from '../../components/Inputs';\nimport { Page, MoreOptions, EventIcon } from '../../components/';\nimport { onExport, validate } from './form-helper'; // PAGE INFO\n\nconst PAGE_NAME = i18n.t('Event export');\nconst PAGE_DESCRIPTION = i18n.t('Export event data for programs, stages and tracked entities in the DXF 2 format.');\nconst PAGE_ICON = <EventIcon />;\nconst today = new Date();\nconst initialValues = {\n  selectedOrgUnits: [],\n  selectedPrograms: [],\n  programStage: undefined,\n  format: defaultFormatOption,\n  compression: defaultCompressionOption,\n  startDate: new Date(today.getFullYear(), today.getMonth() - 3, today.getDate()),\n  endDate: today,\n  includeDeleted: false,\n  idScheme: defaultIdSchemeOption,\n  inclusion: defaultInclusionOption\n};\n\nconst EventExport = () => {\n  const {\n    baseUrl\n  } = useConfig();\n  const onSubmit = onExport(baseUrl);\n  return <Page title={PAGE_NAME} desc={PAGE_DESCRIPTION} icon={PAGE_ICON} dataTest=\"page-export-data\">\n            <Form onSubmit={onSubmit} initialValues={initialValues} validate={validate} subscription={{\n      values: true\n    }} render={({\n      handleSubmit,\n      form,\n      values\n    }) => <form onSubmit={handleSubmit}>\n                        <OrgUnitTree multiSelect={false} />\n                        <ProgramPicker autoSelectFirst />\n                        <ProgramStages selectedPrograms={values.selectedPrograms} form={form} />\n                        <StartDate />\n                        <EndDate />\n                        <Format availableFormats={formatOptions} />\n                        <Compression availableCompressions={compressionOptions} />\n                        <MoreOptions>\n                            <IncludeDeleted value={values.includeDeleted} />\n                            <IdScheme />\n                            <Inclusion />\n                        </MoreOptions>\n                        <ExportButton />\n                    </form>} />\n        </Page>;\n};\n\nexport { EventExport };","const hasAuthorityToSkipAudit = authorities => authorities.includes('ALL') || authorities.includes('F_SKIP_DATA_IMPORT_AUDIT');\n\nexport { hasAuthorityToSkipAudit };","import React, { useContext, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useConfig } from '@dhis2/app-runtime';\nimport { Form } from '@dhis2/ui-forms';\nimport i18n from '@dhis2/d2-i18n';\nimport { getPrevJobDetails } from '../../utils/helper';\nimport { formatAdxPdfOptions, defaultFormatOption, defaultStrategyOption, defaultDataElementIdSchemeOption, defaultOrgUnitIdSchemeOption, defaultIdSchemeOption } from '../../utils/options';\nimport { FileUpload, Format, FirstRowIsHeader, Strategy, PreheatCache, SkipAudit, SkipExistingCheck, DataElementIdScheme, IdScheme, OrgUnitIdScheme, ImportButtonStrip, FormAlerts } from '../../components/Inputs';\nimport { hasAuthorityToSkipAudit } from '../../components/WithAuthority/predicates';\nimport { Page, WithAuthority, MoreOptions, DataIcon } from '../../components/';\nimport { TaskContext, getNewestTask } from '../../contexts/';\nimport { onImport } from './form-helper'; // PAGE INFO\n\nconst PAGE_NAME = i18n.t('Data import');\nconst PAGE_DESCRIPTION = i18n.t('Import data values from ADX XML, DXF 2 XML, JSON, CSV or PDF files.');\nconst PAGE_ICON = <DataIcon />;\n\nconst createInitialValues = prevJobDetails => ({\n  files: prevJobDetails.files,\n  format: prevJobDetails.format || defaultFormatOption,\n  strategy: prevJobDetails.strategy || defaultStrategyOption,\n  firstRowIsHeader: !!prevJobDetails.firstRowIsHeader,\n  preheatCache: !!prevJobDetails.preheatCache,\n  skipAudit: !!prevJobDetails.skipAudit,\n  dataElementIdScheme: prevJobDetails.dataElementIdScheme || defaultDataElementIdSchemeOption,\n  orgUnitIdScheme: prevJobDetails.orgUnitIdScheme || defaultOrgUnitIdSchemeOption,\n  idScheme: prevJobDetails.idScheme || defaultIdSchemeOption,\n  skipExistingCheck: !!prevJobDetails.skipExistingCheck\n});\n\nconst DataImport = () => {\n  const {\n    tasks: {\n      data: dataTasks\n    },\n    addTask\n  } = useContext(TaskContext); // recreating a previously run job\n\n  const query = useLocation().query;\n  const prevJobDetails = getPrevJobDetails(query, dataTasks);\n  const initialValues = createInitialValues(prevJobDetails);\n  const [progress, setProgress] = useState(0);\n  const [showFullSummaryTask, setShowFullSummaryTask] = useState(false);\n  const {\n    baseUrl\n  } = useConfig();\n  const onSubmit = onImport({\n    baseUrl,\n    setProgress,\n    addTask,\n    setShowFullSummaryTask\n  });\n  return <Page title={PAGE_NAME} desc={PAGE_DESCRIPTION} icon={PAGE_ICON} loading={progress} dataTest=\"page-import-data\" summaryTask={getNewestTask(dataTasks)} showFullSummaryTask={showFullSummaryTask}>\n            <Form onSubmit={onSubmit} initialValues={initialValues} subscription={{\n      values: true,\n      submitError: true\n    }} render={({\n      handleSubmit,\n      form,\n      values,\n      submitError\n    }) => <form onSubmit={handleSubmit}>\n                        <FileUpload />\n                        <Format availableFormats={formatAdxPdfOptions} />\n                        <FirstRowIsHeader show={values.format.value == 'csv'} value={values.firstRowIsHeader} />\n                        <Strategy />\n                        <PreheatCache value={values.preheatCache} />\n                        <WithAuthority pred={hasAuthorityToSkipAudit}>\n                            <SkipAudit value={values.skipAudit} />\n                        </WithAuthority>\n                        <MoreOptions>\n                            <DataElementIdScheme />\n                            <OrgUnitIdScheme />\n                            <IdScheme />\n                            <SkipExistingCheck value={values.skipExistingCheck} />\n                        </MoreOptions>\n                        <ImportButtonStrip form={form} />\n                        <FormAlerts alerts={submitError} />\n                    </form>} />\n        </Page>;\n};\n\nexport { DataImport };","import { FORM_ERROR } from '../../utils/final-form';\nimport { uploadFile } from '../../utils/helper';\n\nconst onImport = ({\n  baseUrl,\n  setProgress,\n  addTask,\n  setShowFullSummaryTask\n}) => async values => {\n  const {\n    dryRun,\n    files,\n    strategy,\n    preheatCache,\n    skipAudit,\n    dataElementIdScheme,\n    orgUnitIdScheme,\n    idScheme,\n    skipExistingCheck,\n    format,\n    firstRowIsHeader\n  } = values; // send xhr\n\n  const apiBaseUrl = `${baseUrl}/api/`;\n  const endpoint = 'dataValueSets.json';\n  const params = ['async=true', `dryRun=${dryRun}`, `strategy=${strategy.value}`, `preheatCache=${preheatCache}`, `skipAudit=${skipAudit}`, `dataElementIdScheme=${dataElementIdScheme.value}`, `orgUnitIdScheme=${orgUnitIdScheme.value}`, `idScheme=${idScheme.value}`, `skipExistingCheck=${skipExistingCheck}`, `format=${format.value}`, format == 'csv' ? `firstRowIsHeader=${firstRowIsHeader}` : ''].filter(s => s != '').join('&');\n  const url = `${apiBaseUrl}${endpoint}?${params}`;\n\n  try {\n    await uploadFile({\n      url,\n      file: files[0],\n      format: format.value,\n      type: 'DATAVALUE_IMPORT',\n      setProgress,\n      addEntry: (id, entry) => addTask('data', id, { ...entry,\n        jobDetails: values\n      })\n    });\n  } catch (e) {\n    const errors = [e];\n    return {\n      [FORM_ERROR]: errors\n    };\n  } finally {\n    setShowFullSummaryTask(true);\n  }\n};\n\nexport { onImport };","import i18n from '@dhis2/d2-i18n';\nimport JSZip from 'jszip';\nimport { FORM_ERROR } from '../../utils/final-form';\nimport { createBlob, downloadBlob, jsDateToISO8601, pathToId } from '../../utils/helper';\nimport { DATE_BEFORE_VALIDATOR, DATE_AFTER_VALIDATOR } from '../../components/DatePicker/DatePickerField';\nconst dataValueSetQuery = {\n  sets: {\n    resource: 'dataValueSets',\n    params: ({\n      dataElementIdScheme,\n      orgUnitIdScheme,\n      idScheme,\n      includeDeleted,\n      children,\n      startDate,\n      endDate,\n      orgUnit,\n      dataSet,\n      format\n    }) => ({\n      dataElementIdScheme,\n      orgUnitIdScheme,\n      idScheme,\n      includeDeleted,\n      children,\n      startDate,\n      endDate,\n      orgUnit,\n      dataSet,\n      format\n    })\n  }\n};\n\nconst onExport = engine => async values => {\n  const {\n    selectedOrgUnits,\n    includeChildren,\n    selectedDataSets,\n    format,\n    compression,\n    startDate,\n    endDate,\n    includeDeleted,\n    dataElementIdScheme,\n    orgUnitIdScheme,\n    idScheme\n  } = values; // fetch data\n\n  try {\n    const {\n      sets\n    } = await engine.query(dataValueSetQuery, {\n      variables: {\n        dataElementIdScheme: dataElementIdScheme.value,\n        orgUnitIdScheme: orgUnitIdScheme.value,\n        idScheme: idScheme.value,\n        includeDeleted: includeDeleted.toString(),\n        children: includeChildren.toString(),\n        startDate: jsDateToISO8601(startDate),\n        endDate: jsDateToISO8601(endDate),\n        orgUnit: selectedOrgUnits.map(o => pathToId(o)),\n        dataSet: selectedDataSets,\n        format: format.value\n      }\n    });\n    const dataStr = format.value === 'json' ? JSON.stringify(sets) : sets;\n    const filename = `data.${format.value}`;\n\n    if (compression.value !== '') {\n      const zip = new JSZip();\n      zip.file(filename, dataStr);\n      zip.generateAsync({\n        type: 'blob'\n      }).then(content => {\n        const url = URL.createObjectURL(content);\n        downloadBlob(url, `${filename}.${compression.value}`);\n      });\n    } else {\n      const url = createBlob(dataStr, format.value);\n      downloadBlob(url, filename);\n    }\n  } catch (error) {\n    const errors = [{\n      id: `http-${new Date().getTime()}`,\n      critical: true,\n      message: `${i18n.t('HTTP error when fetching data')}. ${error.message}`\n    }];\n    console.error('DataExport onExport error: ', error);\n    return {\n      [FORM_ERROR]: errors\n    };\n  }\n};\n\nconst validate = values => ({\n  startDate: DATE_BEFORE_VALIDATOR(values.startDate, values.endDate),\n  endDate: DATE_AFTER_VALIDATOR(values.endDate, values.startDate)\n});\n\nexport { onExport, validate };","import React from 'react';\nimport { useDataEngine } from '@dhis2/app-runtime';\nimport i18n from '@dhis2/d2-i18n';\nimport { Form } from '@dhis2/ui-forms';\nimport { formatAdxOptions, compressionOptions, defaultFormatOption, defaultCompressionOption, defaultDataElementIdSchemeOption, defaultOrgUnitIdSchemeOption, defaultIdSchemeOption } from '../../utils/options';\nimport { OrgUnitTree, IncludeChildren, DataSetPicker, Format, Compression, StartDate, EndDate, IncludeDeleted, DataElementIdScheme, IdScheme, OrgUnitIdScheme, ExportButton, FormAlerts } from '../../components/Inputs';\nimport { Page, MoreOptions, DataIcon } from '../../components/';\nimport { onExport, validate } from './form-helper'; // PAGE INFO\n\nconst PAGE_NAME = i18n.t('Data export');\nconst PAGE_DESCRIPTION = i18n.t('Export data values as ADX XML, DFX 2 XML, JSON or CSV files.');\nconst PAGE_ICON = <DataIcon />;\nconst today = new Date();\nconst initialValues = {\n  selectedOrgUnits: [],\n  includeChildren: true,\n  selectedDataSets: [],\n  format: defaultFormatOption,\n  compression: defaultCompressionOption,\n  startDate: new Date(today.getFullYear(), today.getMonth() - 3, today.getDate()),\n  endDate: today,\n  includeDeleted: false,\n  dataElementIdScheme: defaultDataElementIdSchemeOption,\n  orgUnitIdScheme: defaultOrgUnitIdSchemeOption,\n  idScheme: defaultIdSchemeOption\n};\n\nconst DataExport = () => {\n  const engine = useDataEngine();\n  const onSubmit = onExport(engine);\n  return <Page title={PAGE_NAME} desc={PAGE_DESCRIPTION} icon={PAGE_ICON} dataTest=\"page-export-data\">\n            <Form onSubmit={onSubmit} initialValues={initialValues} validate={validate} subscription={{\n      values: true,\n      submitError: true\n    }} render={({\n      handleSubmit,\n      form,\n      values,\n      submitError\n    }) => <form onSubmit={handleSubmit}>\n                        <OrgUnitTree />\n                        <IncludeChildren value={values.includeChildren} />\n                        <DataSetPicker />\n                        <Format availableFormats={formatAdxOptions} />\n                        <Compression availableCompressions={compressionOptions} />\n                        <StartDate />\n                        <EndDate />\n                        <MoreOptions>\n                            <IncludeDeleted value={values.includeDeleted} />\n                            <DataElementIdScheme />\n                            <OrgUnitIdScheme />\n                            <IdScheme />\n                        </MoreOptions>\n                        <ExportButton />\n                        <FormAlerts alerts={submitError} />\n                    </form>} />\n        </Page>;\n};\n\nexport { DataExport };","import React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { DataImport, DataExport, EventExport, EventImport, GMLImport, MetadataDependencyExport, MetadataExport, MetadataImport, JobOverview } from '../../pages';\n\nconst Router = () => {\n  return <Switch>\n            <Route path=\"/import/data\" component={DataImport} />\n            <Route path=\"/import/event\" component={EventImport} />\n            <Route path=\"/import/gml\" component={GMLImport} />\n            <Route path=\"/import/metadata\" component={MetadataImport} />\n            <Route path=\"/export/data\" component={DataExport} />\n            <Route path=\"/export/event\" component={EventExport} />\n            <Route path=\"/export/metadata-dependency\" component={MetadataDependencyExport} />\n            <Route path=\"/export/metadata\" component={MetadataExport} />\n            <Route path=\"/utils/job-overview\" component={JobOverview} />\n            <Redirect from=\"*\" to=\"/import/data\" />\n        </Switch>;\n};\n\nexport { Router };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SingleSelectField, SingleSelectOption, Help } from '@dhis2/ui-core';\nimport { optionPropType, optionsPropType } from '../../utils/options';\nimport styles from './Select.module.css';\nimport { FormField } from '../';\n\nconst Select = ({\n  name,\n  dataTest,\n  label,\n  options,\n  setValue,\n  selected,\n  noMatchText,\n  loading,\n  error,\n  meta,\n  warning,\n  validationText,\n  helpText,\n  filled,\n  dense,\n  filterable,\n  initialFocus\n}) => {\n  const optionEls = options.map(o => <SingleSelectOption key={o.value} value={o.value} label={o.label} />);\n\n  const onChange = ({\n    selected\n  }) => setValue(selected);\n\n  return <FormField label={label} dataTest={dataTest}>\n            <div className={styles.select} data-test={`${dataTest}-container`}>\n                <SingleSelectField dense={dense} filled={filled} initialFocus={initialFocus} loading={loading} warning={warning} error={error} name={name} onChange={onChange} selected={selected} filterable={filterable} noMatchText={noMatchText ? noMatchText : `No match found for filter`} helpText={helpText} validationText={validationText} dataTest={`${dataTest}-ssf`}>\n                    {optionEls}\n                </SingleSelectField>\n                {(meta.touched || !meta.pristine) && meta.error && <Help error>{meta.error}</Help>}\n            </div>\n        </FormField>;\n};\n\nSelect.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  meta: PropTypes.object.isRequired,\n  name: PropTypes.string.isRequired,\n  options: optionsPropType.isRequired,\n  setValue: PropTypes.func.isRequired,\n  dense: PropTypes.bool,\n  error: PropTypes.bool,\n  filled: PropTypes.bool,\n  filterable: PropTypes.bool,\n  helpText: PropTypes.string,\n  initialFocus: PropTypes.bool,\n  loading: PropTypes.bool,\n  noMatchText: PropTypes.string,\n  selected: optionPropType,\n  validationText: PropTypes.string,\n  warning: PropTypes.bool\n};\nexport { Select };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field } from '@dhis2/ui-forms';\nimport { Select } from '../';\n\nconst Wrapper = ({\n  input: {\n    value,\n    onChange\n  },\n  meta,\n  inputName,\n  ...rest\n}) => <Select name={inputName} meta={meta} selected={value || undefined} setValue={onChange} {...rest} />;\n\nWrapper.propTypes = {\n  input: PropTypes.shape({\n    value: PropTypes.any,\n    onChange: PropTypes.func\n  }).isRequired,\n  inputName: PropTypes.string.isRequired,\n  meta: PropTypes.shape({\n    error: PropTypes.string,\n    pristine: PropTypes.bool,\n    touched: PropTypes.bool\n  }).isRequired\n};\n\nconst SelectField = ({\n  name,\n  ...rest\n}) => {\n  return <Field component={Wrapper} name={name} inputName={name} {...rest} />;\n};\n\nSelectField.propTypes = {\n  name: PropTypes.string.isRequired\n};\nexport { SelectField };","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Button, Checkbox, InputField, MenuItem, Radio } from '@dhis2/ui-core';\nimport { optionsPropType } from '../../utils/options';\nimport styles from './SelectableList.module.css';\n\nconst SelectableList = ({\n  label,\n  name,\n  selected,\n  setSelected,\n  list,\n  multiSelect,\n  withFilter,\n  withActions,\n  dataTest\n}) => {\n  const [filter, setFilter] = useState('');\n\n  const onSelectAll = () => {\n    if (multiSelect) {\n      const all = list.map(({\n        value\n      }) => value);\n      setSelected(all);\n    }\n  };\n\n  const onClearAll = () => {\n    if (multiSelect) {\n      setSelected([]);\n    }\n  };\n\n  const onSelect = ({\n    value: id\n  }) => {\n    if (multiSelect) {\n      const newValue = !selected.includes(id);\n\n      if (newValue == false) {\n        setSelected(selected.filter(p => p != id));\n      } else {\n        setSelected([...selected, id]);\n      }\n    } else {\n      setSelected([id]);\n    }\n  };\n\n  return <div data-test={dataTest}>\n            {withFilter && <div className={styles.filter} data-test={`${dataTest}-filter`}>\n                    <InputField name=\"filter\" label={label} value={filter} onChange={({\n        value\n      }) => setFilter(value)} dense />\n                </div>}\n\n            {withActions && <div className={styles.actions} data-test={`${dataTest}-actions`}>\n                    <Button className={styles.action} onClick={onSelectAll} dataTest={`${dataTest}-actions-select-all`}>\n                        {i18n.t('Select all')}\n                    </Button>\n                    <Button className={styles.action} onClick={onClearAll} dataTest={`${dataTest}-actions-clear-all`}>\n                        {i18n.t('Clear all')}\n                    </Button>\n                </div>}\n\n            <div className={styles.body} data-test={`${dataTest}-body`} name={name}>\n                {list.filter(({\n        label\n      }) => label.toLowerCase().includes(filter.toLowerCase())).map(({\n        value,\n        label\n      }) => {\n        const component = multiSelect ? <Checkbox value={value} name={name} label={label} checked={selected.includes(value)} onChange={() => 0} /> : <Radio value={value} name={name} label={label} checked={selected.includes(value)} onChange={() => 0} />;\n        return <MenuItem dataTest={`${dataTest}-body-li-${value}`} key={`${dataTest}-body-li-${value}`} value={value} label={component} onClick={onSelect} />;\n      })}\n            </div>\n        </div>;\n};\n\nSelectableList.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  list: optionsPropType.isRequired,\n  name: PropTypes.string.isRequired,\n  selected: PropTypes.arrayOf(PropTypes.string).isRequired,\n  setSelected: PropTypes.func.isRequired,\n  multiSelect: PropTypes.bool,\n  withActions: PropTypes.bool,\n  withFilter: PropTypes.bool\n};\nexport { SelectableList };","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Divider, Menu, MenuItem } from '@dhis2/ui-core';\nimport styles from './Sidebar.module.css';\nimport { StyledLink } from '../';\nimport { DataIcon, EventIcon, GMLIcon, MetadataDependencyExportIcon, MetadataExportIcon, MetadataImportIcon, TasksIcon } from '../';\nconst dataImportPage = {\n  name: i18n.t('Data import'),\n  code: 'data-import',\n  icon: <DataIcon />,\n  path: '/import/data'\n};\nconst eventImportPage = {\n  name: i18n.t('Event import'),\n  code: 'event-import',\n  icon: <EventIcon />,\n  path: '/import/event'\n};\nconst gmlImportPage = {\n  name: i18n.t('GML import'),\n  code: 'gml-import',\n  icon: <GMLIcon />,\n  path: '/import/gml'\n};\nconst metadataImportPage = {\n  name: i18n.t('Metadata import'),\n  code: 'metadata-import',\n  path: '/import/metadata',\n  icon: <MetadataImportIcon />\n};\nconst dataExportPage = {\n  name: i18n.t('Data export'),\n  code: 'data-export',\n  path: '/export/data',\n  icon: <DataIcon />\n};\nconst eventExportPage = {\n  name: i18n.t('Event export'),\n  code: 'event-export',\n  path: '/export/event',\n  icon: <EventIcon />\n};\nconst metadataDependencyExportPage = {\n  name: i18n.t('Metadata dependency export'),\n  code: 'metadata-dependency-export',\n  path: '/export/metadata-dependency',\n  icon: <MetadataDependencyExportIcon />\n};\nconst metadataExportPage = {\n  name: i18n.t('Metadata export'),\n  code: 'metadata-export',\n  path: '/export/metadata',\n  icon: <MetadataExportIcon />\n};\nconst importPages = [dataImportPage, eventImportPage, gmlImportPage, metadataImportPage];\nconst exportPages = [dataExportPage, eventExportPage, metadataDependencyExportPage, metadataExportPage];\nconst jobOverviewPage = {\n  name: i18n.t('Job overview'),\n  code: 'job-overview',\n  path: '/utils/job-overview',\n  icon: <TasksIcon />\n};\n\nconst SidebarItem = ({\n  name,\n  path,\n  code,\n  icon,\n  active,\n  className\n}) => <StyledLink to={path} dataTest={`sidebar-link-${code}`}>\n        <MenuItem active={active} icon={icon} label={name} className={className} />\n    </StyledLink>;\n\nSidebarItem.propTypes = {\n  active: PropTypes.bool.isRequired,\n  code: PropTypes.string.isRequired,\n  icon: PropTypes.node.isRequired,\n  name: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n  className: PropTypes.string\n};\n\nconst Sidebar = () => {\n  const location = useLocation();\n  const pathname = location.pathname;\n  return <Menu className={styles.Menu}>\n            <h3 className={styles.sectionTitle}>{i18n.t('Import')}</h3>\n            {importPages.map(({\n      icon,\n      name,\n      code,\n      path\n    }) => {\n      const active = pathname == path;\n      return <SidebarItem name={name} path={path} code={code} icon={icon} active={active} key={path} />;\n    })}\n            <Divider />\n            <h3 className={styles.sectionTitle}>{i18n.t('Export')}</h3>\n            {exportPages.map(({\n      icon,\n      name,\n      code,\n      path\n    }) => {\n      const active = pathname == path;\n      return <SidebarItem name={name} path={path} code={code} icon={icon} active={active} key={path} />;\n    })}\n            <Divider />\n            <SidebarItem name={jobOverviewPage.name} path={jobOverviewPage.path} code={jobOverviewPage.code} icon={jobOverviewPage.icon} active={pathname == jobOverviewPage.path} className={pathname == jobOverviewPage.path ? '' : styles.jobOverview} key={jobOverviewPage.path} />\n        </Menu>;\n};\n\nexport { Sidebar };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport styles from './StyledLink.module.css';\n\nconst StyledLink = ({\n  dataTest,\n  ...passThroughProps\n}) => <Link data-test={dataTest} className={styles.link} {...passThroughProps} />;\n\nStyledLink.propTypes = {\n  dataTest: PropTypes.string.isRequired\n};\nexport { StyledLink };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Field, Switch as SwitchUI } from '@dhis2/ui-forms';\nimport { FormField } from '../';\n\nconst Switch = ({\n  name,\n  label,\n  help,\n  value,\n  dataTest\n}) => {\n  return <FormField label={label} dataTest={dataTest}>\n            <Field component={SwitchUI} name={name} label={value ? i18n.t('Yes') : i18n.t('No')} helpText={help} dataTest={`${dataTest}-sf`} />\n        </FormField>;\n};\n\nSwitch.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  help: PropTypes.string,\n  value: PropTypes.bool\n};\nexport { Switch };","import { useContext } from 'react';\nimport { UserContext } from '../../contexts/';\n\nconst WithAuthority = ({\n  pred,\n  children\n}) => {\n  const user = useContext(UserContext);\n  if (!user) return null;\n  return pred(user.authorities) ? children : null;\n};\n\nexport { WithAuthority };","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport i18n from '@dhis2/d2-i18n';\nimport { CssReset, CircularLoader, ScreenCover } from '@dhis2/ui-core';\nimport { TaskContext } from './contexts/';\nimport { UserContext } from './contexts/';\nimport { useUser, useTasks } from './hooks/';\nimport styles from './App.module.css';\nimport { Sidebar } from './components/';\nimport { Router } from './components/';\n\nconst App = () => {\n  const {\n    tasks,\n    addTask,\n    jobOverview,\n    updateJobOverview\n  } = useTasks();\n  const {\n    loading,\n    error,\n    user\n  } = useUser();\n  const showApp = !loading && !error;\n  return <>\n            <CssReset />\n            {loading && <ScreenCover dataTest=\"app-screen-cover\">\n                    <CircularLoader dataTest=\"app-loader\" />\n                </ScreenCover>}\n            {error && <div data-test=\"app-error\">\n                    <p>\n                        {i18n.t('Something went wrong when loading the current user!')}\n                    </p>\n                    <p>{error.message}</p>\n                </div>}\n            {showApp && <HashRouter>\n                    <UserContext.Provider value={user}>\n                        <TaskContext.Provider value={{\n          tasks,\n          addTask,\n          jobOverview,\n          updateJobOverview\n        }}>\n                            <div className={styles.container}>\n                                <div className={styles.sidebar}>\n                                    <Sidebar />\n                                </div>\n                                <div className={styles.content}>\n                                    <Router />\n                                </div>\n                            </div>\n                        </TaskContext.Provider>\n                    </UserContext.Provider>\n                </HashRouter>}\n        </>;\n};\n\nexport default App;"],"sourceRoot":""}